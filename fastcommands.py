import disnake, random, logging
from datetime import datetime as dt
from disnake.ext import commands
from database import Database

logger = logging.getLogger('bot')
logger.setLevel(logging.INFO)

class FastCommand(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = Database("database.db")

    @commands.Cog.listener()
    async def on_message(self, message):
        if message.author == self.bot.user:
            return
        
        def calculate_marriage_time():
            start_date = dt(2024, 8, 17, 0, 41)
            current_date = dt.now()
            delta = current_date - start_date
            days = delta.days
            hours = delta.seconds // 3600
            minutes = (delta.seconds // 60) % 60
            seconds = delta.seconds % 60
            return f"{days} –¥–Ω–µ–π {hours} —á–∞—Å–æ–≤ {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥"
        
        if message.author.id == 444574234564362250 and message.content.startswith(f"a.marry {message.guild.get_member(self.bot.user.id).mention}"):
            marriage_time = calculate_marriage_time()
            embed = disnake.Embed(title="–û—Ç–Ω–æ—à–µ–Ω–∏—è", description=f"–¢–≤–æ—è –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞: **{self.bot.user.name}**\n–í –±—Ä–∞–∫–µ: **{marriage_time}**", color=None)
            embed.set_thumbnail(url=message.author.avatar.url)
            embed.set_footer(text=f"{message.guild.name} ‚Ä¢ {dt.now().strftime('%d.%m.%Y %H:%M')}")
            await message.channel.send(embed=embed)
        elif message.content.startswith(f"a.marry {message.guild.get_member(self.bot.user.id).mention}"):
            answers = [
                "–≠—Ç–æ —Ç–∞–∫ —Å–ª–æ–∂–Ω–æ... –ø—Ä–æ—Å—Ç–∏ —è –≤—ã–Ω—É–∂–¥–µ–Ω–∞ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è üòî",
                "–Ø –∑–∞–Ω—è—Ç–∞ —Ç–∞–∫-—Ç–æ —ç–º–º... üòí",
                "–ù–∞—à–∞ –ª—é–±–æ–≤—å –Ω–µ –≤–∑–∞–∏–º–Ω–∞... –ø—Ä–æ—Å—Ç–∏.. üíî",
                "–Ø –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–∞–∫–æ–º—É –±–æ–ª—å—à–æ–º—É —à–∞–≥—É... üòü",
                "–ú–Ω–µ –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è –ø–æ–¥—É–º–∞—Ç—å... ü§î",
                "–Ø –Ω–µ —É–≤–µ—Ä–µ–Ω–∞, —á—Ç–æ –º—ã –≥–æ—Ç–æ–≤—ã –∫ –±—Ä–∞–∫—É...  üòï",
                "–¢—ã —Å–ª–∏—à–∫–æ–º –º–∏–ª—ã–π, –Ω–æ —è –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ –±—Ä–∞–∫—É üòä",
                "–Ø –ª—é–±–ª—é —Ç–µ–±—è, –Ω–æ –Ω–µ –≤ —ç—Ç–æ–º —Å–º—ã—Å–ª–µ :worried: üò≥",
                "–ú—ã –º–æ–∂–µ–º –±—ã—Ç—å –¥—Ä—É–∑—å—è–º–∏, –Ω–æ –Ω–µ –º—É–∂–µ–º –∏ –∂–µ–Ω–æ–π üë´",
                "–Ø –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–∞–∫–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ üò¨",
                "–ú–Ω–µ –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è –ø–æ–¥—É–º–∞—Ç—å –æ –Ω–∞—à–µ–π –±—É–¥—É—â–µ–º ü§ù",
                "–Ø –Ω–µ —É–≤–µ—Ä–µ–Ω–∞, —á—Ç–æ –º—ã —Å–æ–≤–º–µ—Å—Ç–∏–º—ã ü§î"
            ]
            await message.reply(random.choice(answers))
        if message.content.startswith('.'):
            command = message.content.split()[0][1:].lower()
            
            self.db.cursor.execute("SELECT response FROM fast_commands WHERE command_name = ?", (command,))
            result = self.db.cursor.fetchone()
            
            if result:
                await message.delete()
                response = result[0].replace("{author}", message.author.name)
                await message.channel.send(response)
                logger.info(f"[FCOMMAND] –ë—ã—Å—Ç—Ä–∞—è –∫–æ–º–∞–Ω–¥–∞ - '{command}' –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.author.name}")
            else:
                logger.info(f"[FCOMMAND] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ '{command}' –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.author.name}")

def setupfastcommands(bot):
    bot.add_cog(FastCommand(bot))
