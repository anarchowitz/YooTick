import disnake, asyncio, datetime
from disnake.ext import commands
from database import Database

class Tickets(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = Database("database.db")
    
    @staticmethod
    def check_staff_permissions(inter, required_role):
        db = Database("database.db")
        db.cursor.execute("SELECT * FROM staff_list WHERE username = ? AND user_id = ?", (inter.author.name, inter.author.id))
        staff_member = db.cursor.fetchone()
        
        if staff_member is None:
            return False
        
        if staff_member[4] != required_role:
            return False
        
        return True
    
    @commands.slash_command(description="[DEV] - –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–æ–≤")
    async def ticketmsg(self, inter):
        if not self.check_staff_permissions(inter, "dev"):
            await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
            return
        self.db.cursor.execute("""
            SELECT embed_color, category_id, ticket_channel_id 
            FROM settings 
            WHERE guild_id = ?
        """, (inter.guild.id,))
        settings = self.db.cursor.fetchone()

        if settings is None:
            await inter.response.send_message("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return

        embed_color = disnake.Color(int(settings[0].lstrip('#'), 16))
        category_id = settings[1]
        channel_id = settings[2]

        category = inter.guild.get_channel(category_id)
        channel = inter.guild.get_channel(channel_id)

        if category is None or channel is None:
            await inter.response.send_message("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return

        embed = disnake.Embed(
            title="–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É",
            description="–ú—ã –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º **–ø–æ–¥—Ä–æ–±–Ω–æ** –æ–ø–∏—Å—ã–≤–∞—Ç—å –≤–∞—à–∏ –ø—Ä–æ—Å—å–±—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –æ–∫–∞–∑–∞—Ç—å –≤–∞–º **–±—ã—Å—Ç—Ä—É—é –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –ø–æ–º–æ—â—å**.\n\n"
            "‚ñé–í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:\n"
            "- –ù–µ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ —Ç–∏–∫–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º–µ –∏–ª–∏ –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å –æ–ø–∏—Å–∞–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π.\n"
            "- –£–∫–∞–∂–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Ä–µ—à–∏—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n"
            "- –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤.\n\n"
            "**–ù–µ—Å–æ–±–ª—é–¥–µ–Ω–∏–µ —ç—Ç–∏—Ö –ø—Ä–∞–≤–∏–ª –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–∞–∫–∞–∑–∞–Ω–∏—é**.",
            color=embed_color)
        embed.set_author(name='Yooma Support', icon_url="https://static2.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")
        embed.set_thumbnail(url="https://static1.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")

        view = disnake.ui.View()
        button = disnake.ui.Button(label="–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", emoji="üì®", custom_id="create_ticket", style=disnake.ButtonStyle.primary)
        view.add_item(button)

        await channel.send(embed=embed, view=view)
        await inter.response.send_message("–û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.", ephemeral=True)

    @commands.Cog.listener()
    async def on_button_click(self, inter):
        self.db.cursor.execute("""
            SELECT embed_color, category_id, ticket_channel_id FROM settings WHERE guild_id = ?
        """, (inter.guild.id,))
        settings = self.db.cursor.fetchone()

        if settings is None:
            await inter.response.send_message("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return

        embed_color = disnake.Color(int(settings[0].lstrip('#'), 16))
        if inter.data.custom_id == "create_ticket":
            self.db.cursor.execute("SELECT category_id FROM settings WHERE guild_id = ?", (inter.guild.id,))
            category_id = self.db.cursor.fetchone()[0]

            category = inter.guild.get_channel(category_id)

            if category is None:
                await inter.response.send_message("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
                return

            self.db.cursor.execute("SELECT counter_tickets FROM settings WHERE guild_id = ?", (inter.guild.id,))
            counter_tickets = self.db.cursor.fetchone()[0]
            self.db.cursor.execute("UPDATE settings SET counter_tickets = ? WHERE guild_id = ?", (counter_tickets + 1, inter.guild.id))
            self.db.conn.commit()
            thread = await inter.channel.create_thread(name=f"ticket-{counter_tickets + 1}", type=disnake.ChannelType.private_thread)
            await thread.edit(invitable=False)
            thread_number = int(thread.name.split("-")[1])
            self.db.cursor.execute("INSERT INTO created_tickets (thread_id, creator_username, creator_id, thread_number) VALUES (?, ?, ?, ?)", 
                                (thread.id, inter.author.name, inter.author.id, thread_number))
            self.db.conn.commit()

            embed = disnake.Embed(
                title="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –∫–ª–∏–µ–Ω—Å—Ç–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                description="–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, **–æ–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–¥—Ä–æ–±–Ω–µ–µ**, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ–∫–∞–∑–∞—Ç—å –≤–∞–º **–Ω–∞–∏–ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ**.\n\n"
                "‚ñé–í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:\n"
                "- –ù–µ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ —Ç–∏–∫–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º–µ –∏–ª–∏ –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å –æ–ø–∏—Å–∞–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π.\n"
                "- –£–∫–∞–∂–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Ä–µ—à–∏—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n"
                "- –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤.\n\n"
                "**–ù–µ—Å–æ–±–ª—é–¥–µ–Ω–∏–µ —ç—Ç–∏—Ö –ø—Ä–∞–≤–∏–ª –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–∞–∫–∞–∑–∞–Ω–∏—é**.",
                color=embed_color)
            embed.set_author(name='Yooma Support', icon_url="https://static2.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")
            embed.set_thumbnail(url="https://static1.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")
            view = disnake.ui.View(timeout=None)
            take_button = disnake.ui.Button(label="–í–∑—è—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", emoji="üìù", custom_id="take_ticket", style=disnake.ButtonStyle.primary)
            close_button = disnake.ui.Button(label="–ó–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", emoji="üîí", custom_id="close_ticket", style=disnake.ButtonStyle.danger)
            view.add_item(take_button)
            view.add_item(close_button)

            await thread.send(embed=embed, view=view)
            await thread.add_user(inter.author)
            
            self.db.cursor.execute("SELECT primetime FROM settings WHERE guild_id = ?", (inter.guild.id,))
            primetime = self.db.cursor.fetchone()[0]

            if primetime:
                start_time, end_time = primetime.split(" - ")
                start_hour, start_minute = map(int, start_time.split(":"))
                end_hour, end_minute = map(int, end_time.split(":"))

                current_time = datetime.datetime.now()
                current_hour = current_time.hour
                current_minute = current_time.minute

                if not (start_hour <= current_hour < end_hour or (start_hour == current_hour and start_minute <= current_minute) or (end_hour == current_hour and current_minute < end_minute)):
                    await thread.send(f"<@{inter.author.id}>, –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, –∏ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º –æ–±—ã—á–Ω–æ.\n –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –Ω–∞ —Å–≤—è–∑–∏, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å–º–æ–∂–µ–º.")

            await inter.response.send_message(f":tickets:  \ **–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω–æ** - {thread.mention}", ephemeral=True) # type: ignore

        if inter.data.custom_id == "take_ticket":
            if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                return

            self.db.cursor.execute("SELECT taken_username FROM created_tickets WHERE thread_id = ?", (inter.channel.id,))
            taken_ticket = self.db.cursor.fetchone()
            if taken_ticket is not None and taken_ticket[0] is not None:
                await inter.response.send_message("–≠—Ç–æ—Ç —Ç–∏–∫–µ—Ç —É–∂–µ –≤–∑—è—Ç!", ephemeral=True)
                return

            self.db.cursor.execute("SELECT creator_username, thread_number FROM created_tickets WHERE thread_id = ?", (inter.channel.id,))
            creator_username, thread_number = self.db.cursor.fetchone()
            
            embed = disnake.Embed(title="", description=f"–£—Å–ø–µ—à–Ω–æ –≤–∑—è–ª—Å—è –∑–∞ —Ç–∏–∫–µ—Ç - {inter.author.mention}", color=0xF0C43F,)
            await inter.response.send_message(embed=embed)

            self.db.cursor.execute("UPDATE created_tickets SET taken_username = ? WHERE thread_id = ?", 
                                (inter.author.name, inter.channel.id))
            self.db.conn.commit()

            new_name = f"{inter.author.name}-ticket-{thread_number}"
            await inter.channel.edit(name=new_name)
        
        if inter.data.custom_id == "close_ticket":
            confirmation_embed = disnake.Embed(
                title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                description="–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç?",
                color=0xF0C43F,
            )
            view = disnake.ui.View(timeout=30)
            close_button = disnake.ui.Button(label="–ó–∞–∫—Ä—ã—Ç—å", emoji='üîí', custom_id="confirm_close_ticket", style=disnake.ButtonStyle.red)
            close_with_reason_button = disnake.ui.Button(label='–ó–∞–∫—Ä—ã—Ç—å —Å –ø—Ä–∏—á–∏–Ω–æ–π', custom_id="confirm_close_with_reason_ticket", style=disnake.ButtonStyle.red, emoji='üîí')
            cancel_button = disnake.ui.Button(label="–û—Ç–º–µ–Ω–∞", emoji='üö´', custom_id="cancel_close_ticket", style=disnake.ButtonStyle.gray)
            view.add_item(close_button)
            view.add_item(close_with_reason_button)
            view.add_item(cancel_button)

            await inter.response.send_message(embed=confirmation_embed, view=view, ephemeral=True)
        
        if inter.data.custom_id == "confirm_close_ticket":
            self.db.cursor.execute("SELECT taken_username FROM created_tickets WHERE thread_id = ?", (inter.channel.id,))
            taken_username = self.db.cursor.fetchone()[0]
            user = inter.guild.get_member_named(taken_username)
            embed1 = disnake.Embed(
                description=f"–¢–∏–∫–µ—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç - {inter.user.mention}",
                color=0xF0C43F,
            )
            embed2 = disnake.Embed(
                description=f"–¢–∏–∫–µ—Ç –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
                color=0xF0C43F,
            )
            await inter.response.defer()
            await inter.channel.send(embed=embed1)
            await inter.channel.send(embed=embed2)

            self.db.cursor.execute("SELECT creator_id, creator_username, thread_number FROM created_tickets WHERE thread_id = ?", (inter.channel.id,))
            creator_id, creator_username, thread_number = self.db.cursor.fetchone()
            creator = await self.bot.fetch_user(creator_id)
            if creator is not None:
                date_str = datetime.date.today().strftime("%d.%m.%Y")
                embed = disnake.Embed(title="–í–∞—à —Ç–∏–∫–µ—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç",timestamp=datetime.datetime.now(),color=embed_color)
                embed.add_field(name=":id: Ticket ID", value=thread_number, inline=True)
                embed.add_field(name=":unlock: –û—Ç–∫—Ä—ã–ª", value=creator.name, inline=True)
                embed.add_field(name=":lock: –ó–∞–∫—Ä—ã–ª", value=inter.author.name, inline=True)
                embed.add_field(name="", value="", inline=False)
                staff_member = self.db.cursor.execute("SELECT username FROM staff_list WHERE username = ?", (inter.author.name,)).fetchone()
                if staff_member is not None:
                    embed.add_field(name=":mag_right: –í–∑—è–ª —Ç–∏–∫–µ—Ç", value=f"<@{inter.author.id}>", inline=True)
                #embed.add_field(name="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", value="", inline=False)
                embed.set_author(name="Yooma Support", icon_url="https://static2.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")
                await creator.send(embed=embed)


            self.db.cursor.execute("SELECT closed_tickets FROM staff_list WHERE username = ?", (taken_username,))
            closed_tickets = self.db.cursor.fetchone()[0]
            self.db.cursor.execute("UPDATE staff_list SET closed_tickets = ? WHERE username = ?", (closed_tickets + 1, taken_username))
            self.db.conn.commit()
            date = datetime.date.today()
            self.db.cursor.execute(""" 
                SELECT * FROM date_stats
                WHERE username = ? AND date = ?
            """, (taken_username, date.strftime("%d.%m.%Y")))
            existing_stat = self.db.cursor.fetchone()
            if existing_stat is None:
                self.db.cursor.execute(""" 
                    INSERT INTO date_stats (username, date, closed_tickets)
                    VALUES (?, ?, 1)
                """, (taken_username, date.strftime("%d.%m.%Y")))
            else:
                self.db.cursor.execute(""" 
                    UPDATE date_stats SET closed_tickets = ?
                    WHERE username = ? AND date = ?
                """, (existing_stat[3] + 1, taken_username, date.strftime("%d.%m.%Y")))
            self.db.conn.commit()
            self.db.cursor.execute("DELETE FROM created_tickets WHERE thread_id = ?", (inter.channel.id,))
            self.db.conn.commit()
            await asyncio.sleep(5)
            await inter.channel.delete()
        
        if inter.data.custom_id == "confirm_close_with_reason_ticket":
            if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                return
            self.db.cursor.execute("SELECT taken_username FROM created_tickets WHERE thread_id = ?", (inter.channel.id,))
            taken_username = self.db.cursor.fetchone()[0]
            self.db.cursor.execute("SELECT closed_tickets FROM staff_list WHERE username = ?", (taken_username,))
            closed_tickets = self.db.cursor.fetchone()[0]
            self.db.cursor.execute("UPDATE staff_list SET closed_tickets = ? WHERE username = ?", (closed_tickets + 1, taken_username))
            self.db.conn.commit()
            date = datetime.date.today()
            self.db.cursor.execute(""" 
                SELECT * FROM date_stats
                WHERE username = ? AND date = ?
            """, (taken_username, date.strftime("%d.%m.%Y")))
            existing_stat = self.db.cursor.fetchone()
            if existing_stat is None:
                self.db.cursor.execute(""" 
                    INSERT INTO date_stats (username, date, closed_tickets)
                    VALUES (?, ?, 1)
                """, (taken_username, date.strftime("%d.%m.%Y")))
            else:
                self.db.cursor.execute(""" 
                    UPDATE date_stats SET closed_tickets = ?
                    WHERE username = ? AND date = ?
                """, (existing_stat[3] + 1, taken_username, date.strftime("%d.%m.%Y")))
            self.db.conn.commit()
            class CloseTicketModal(disnake.ui.Modal):
                def __init__(self, taken_username, bot):
                    self.taken_username = taken_username
                    self.bot = bot
                    self.db = Database("database.db")
                    super().__init__(title="–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞", components=[
                        disnake.ui.ActionRow(
                            disnake.ui.TextInput(
                                label="–ü—Ä–∏—á–∏–Ω–∞",
                                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞",
                                style=disnake.TextInputStyle.short,
                                custom_id="reason_input"
                            )
                        )
                    ])

                async def callback(self, inter):
                    embed1 = disnake.Embed(
                        description=f"–¢–∏–∫–µ—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç - {inter.user.mention}",
                        color=embed_color
                    )
                    embed2 = disnake.Embed(
                        description=f"–¢–∏–∫–µ—Ç –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
                        color=embed_color
                    )
                    await inter.response.send_message(embeds=[embed1, embed2])
                    reason = inter.text_values['reason_input']
                    self.db.cursor.execute("SELECT creator_id, thread_number FROM created_tickets WHERE thread_id = ?", (inter.channel.id,))
                    creator_id, thread_number = self.db.cursor.fetchone()
                    creator = await self.bot.fetch_user(creator_id)
                    if creator is not None:
                        date_str = datetime.date.today().strftime("%d.%m.%Y")
                        embed = disnake.Embed(title="–í–∞—à —Ç–∏–∫–µ—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç",timestamp=datetime.datetime.now(),color=embed_color)
                        embed.add_field(name=":id: Ticket ID", value=thread_number, inline=True)
                        embed.add_field(name=":unlock: –û—Ç–∫—Ä—ã–ª", value=creator.name, inline=True)
                        embed.add_field(name=":lock: –ó–∞–∫—Ä—ã–ª", value=inter.author.name, inline=True)
                        embed.add_field(name="", value="", inline=False)
                        staff_member = self.db.cursor.execute("SELECT username FROM staff_list WHERE username = ?", (inter.author.name,)).fetchone()
                        if staff_member is not None:
                            embed.add_field(name=":mag_right: –í–∑—è–ª —Ç–∏–∫–µ—Ç", value=f"<@{inter.author.id}>", inline=True)
                        embed.add_field(name=":pencil: –°–æ–æ–±—â–µ–Ω–∏–µ", value=reason, inline=False)
                        #embed.add_field(name="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", value="", inline=False)
                        embed.set_author(name="Yooma Support", icon_url="https://static2.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")
                        await creator.send(embed=embed)

                    self.db.cursor.execute("DELETE FROM created_tickets WHERE thread_id = ?", (inter.channel.id,))
                    self.db.conn.commit()
                    await asyncio.sleep(5)
                    await inter.channel.delete()

            await inter.response.send_modal(CloseTicketModal(taken_username, self.bot))


def setuptickets(bot):
    bot.add_cog(Tickets(bot))