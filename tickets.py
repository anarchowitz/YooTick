import disnake, asyncio, datetime, logging
from disnake.ext import commands
from database import Database


logger = logging.getLogger('bot')
logger.setLevel(logging.INFO)

class Tickets(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = Database("database.db")
        self.lock = asyncio.Lock()
        
    
    @staticmethod
    def check_staff_permissions(inter, required_role):
        db = Database("database.db")
        db.cursor.execute("SELECT * FROM staff_list WHERE username = ? AND user_id = ?", (inter.author.name, inter.author.id))
        staff_member = db.cursor.fetchone()
        
        if staff_member is None:
            return False
        
        if staff_member[4] != required_role:
            return False
        
        return True
    
    def update_ban_time(self, user_id, time):
        self.db.cursor.execute("SELECT * FROM banned_users WHERE user_id = ?", (user_id,))
        banned_user = self.db.cursor.fetchone()

        if banned_user is not None:
            current_time = datetime.datetime.now()
            ban_until = datetime.datetime.strptime(banned_user[3], "%d.%m.%Y %H:%M")

            if current_time >= ban_until:
                self.db.cursor.execute("DELETE FROM banned_users WHERE user_id = ?", (user_id,))
                self.db.conn.commit()
    
    @commands.slash_command(description="[DEV] - –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
    async def sum(self, inter, username: str, value: str):
        if not self.check_staff_permissions(inter, "dev"):
            await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
            return

        self.db.cursor.execute("SELECT * FROM staff_list WHERE username = ?", (username,))
        staff_member = self.db.cursor.fetchone()

        if staff_member is None:
            await inter.response.send_message("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            return

        try:
            value = int(value)
        except ValueError:
            await inter.response.send_message("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è", ephemeral=True)
            return

        new_value = staff_member[5] + value
        if new_value < 0:
            new_value = 0

        self.db.cursor.execute("UPDATE staff_list SET closed_tickets = ? WHERE username = ?", (new_value, username))
        self.db.conn.commit()

        await inter.response.send_message(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {username} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_value}", ephemeral=True)

    @commands.slash_command(description="[DEV] - –†–∞–∑—Ä–µ—à–∏—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    async def ticketunban(self, inter, user_id: str):
        if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
            await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
            return
        self.db.cursor.execute("DELETE FROM banned_users WHERE user_id = ?", (user_id,))
        self.db.conn.commit()
        await inter.response.send_message(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–π–¥–∏—à–Ω–∏–∫–æ–º {user_id} —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ.", ephemeral=True)

    @commands.slash_command(description="[DEV] - –ó–∞–ø—Ä–µ—Ç–∏—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –≤—Ä–µ–º—è")
    async def ticketban(self, inter, user_id: str, time: str):
        if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
            await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
            return
        time_map = {
            's': 1,
            'm': 60,
            'h': 3600,
            'd': 86400
        }

        try:
            value = int(time[:-1])
            unit = time[-1]
            if unit not in time_map:
                await inter.response.send_message("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏", ephemeral=True)
                return
            total_seconds = value * time_map[unit]
            ban_until = datetime.datetime.now() + datetime.timedelta(seconds=total_seconds)
            ban_until_str = ban_until.strftime("%d.%m.%Y %H:%M")

            self.db.cursor.execute("INSERT INTO banned_users (user_id, ban_time, ban_until) VALUES (?, ?, ?)", (user_id, time, ban_until_str))
            self.db.conn.commit()
            await inter.response.send_message(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–π–¥–∏—à–Ω–∏–∫–æ–º {user_id} –∑–∞–ø—Ä–µ—â–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ {time}", ephemeral=True)
        except ValueError:
            await inter.response.send_message("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏", ephemeral=True)

    @commands.slash_command(description="[DEV] - ticket msg")
    async def ticketmsg(self, inter):
        if not self.check_staff_permissions(inter, "dev"):
            await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
            return

        settings = self.db.get_settings(guild_id=inter.guild.id)
        if settings is None:
            await inter.response.send_message("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", ephemeral=True)
            return

        embed_color = disnake.Color(int(settings[3].lstrip('#'), 16))
        category_id = settings[4]
        channel_id = settings[5]

        if inter.guild is not None:
            category = inter.guild.get_channel(category_id)
            channel = inter.guild.get_channel(channel_id)
        else:
            category = None
            channel = None

        if category is None or channel is None:
            await inter.response.send_message("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return

        self.db.cursor.execute("SELECT primetime FROM settings WHERE guild_id = ?", (inter.guild.id,))
        primetime = self.db.cursor.fetchone()

        embed = disnake.Embed(
            title="üé´ –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
            description="> üìå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É **–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ**, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ) –∏ —É–∫–∞–∂–∏—Ç–µ –≤—Å–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏. –≠—Ç–æ —É—Å–∫–æ—Ä–∏—Ç —Ä–µ—à–µ–Ω–∏–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n\n"
                        "**‚ñ∏ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞:** 1‚Äì3 —á–∞—Å–∞\n"
                        f"**‚ñ∏ –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏:** {primetime[0]}\n"
                        "**‚ñ∏ –ü—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª:** –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∏–∫–µ—Ç–∞–º/–º—É—Ç/–±–∞–Ω",
            color=embed_color
        )
        embed.add_field(name="\u200b", value="‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨‚ñ¨", inline=False)
        rules = [
            "‚Ä¢ **–ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã** ‚Äî –Ω–µ–∞–¥–µ–∫–≤–∞—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–≤–µ–¥—ë—Ç –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ",
            "‚Ä¢ **–ü–∏—à–∏—Ç–µ –ø–æ –¥–µ–ª—É** ‚Äî –Ω–µ –æ—Ç–∫–ª–æ–Ω—è–π—Ç–µ—Å—å –æ—Ç —Ç–µ–º—ã",
            "‚Ä¢ **–ü—Ä–∏–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞** (—Å–∫—Ä–∏–Ω—à–æ—Ç—ã, –ª–æ–≥–∏ –∏ —Ç.–¥.)",
            "–í —Ç–∏–∫–µ—Ç–∞—Ö –¥–µ–π—Å—Ç–≤—É–µ—Ç –ø—Ä–µ—Ü–µ–¥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–∏–ª."
        ]
        embed.add_field(name="üìú **–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–¥–∞—á–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è**",value="\n".join(rules),inline=False)
        embed.set_author(name="Yooma Support",icon_url="https://static1.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")
        embed.set_footer(text="–ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–∏—Å—Ç–µ–º—ã —Ç–∏–∫–µ—Ç–æ–≤ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –¥–∏—Å–∫–æ—Ä–¥ -> @traquillionz")

        view = disnake.ui.View(timeout=None)
        select_menu = disnake.ui.Select(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—è",
            options=[
                disnake.SelectOption(label="–í–æ–ø—Ä–æ—Å", description="–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å", emoji="‚ùì"),
                disnake.SelectOption(label="–ñ–∞–ª–æ–±–∞", description="–ñ–∞–ª–æ–±–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞/–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", emoji="‚ö†Ô∏è"),
                disnake.SelectOption(label="–û–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ", description="–û–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –Ω–∞–∫–∞–∑–∞–Ω–∏—è", emoji="‚öñÔ∏è"),
                disnake.SelectOption(label="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", description="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –≤–∞—à—É –∏–¥–µ—é –∏–ª–∏ —É–ª—É—á—à–µ–Ω–∏–µ", emoji="üíº"),
                disnake.SelectOption(label="–î–æ–ø. —É—Å–ª—É–≥–∏", description="–î–æ–∫—É–ø–∫–∞/–ü–µ—Ä–µ–Ω–æ—Å –∏ –¥—Ä—É–≥–∏–µ —É—Å–ª—É–≥–∏", emoji="üí°"),
                disnake.SelectOption(label="–î—Ä—É–≥–æ–µ", description="–û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã", emoji="ü§î")
            ]
        )

        async def select_callback(inter):
            theme = inter.data.values[0]
            self.db.cursor.execute("SELECT * FROM staff_list WHERE user_id = ?", (inter.author.id,))
            staff = self.db.cursor.fetchone()
            if staff is not None:
                self.db.cursor.execute("SELECT closed_tickets FROM staff_list WHERE username = ?", (staff[1],))
                closed_tickets = self.db.cursor.fetchone()
                if closed_tickets is not None:
                    closed_tickets = closed_tickets[0]
                    self.db.cursor.execute("UPDATE staff_list SET closed_tickets = ? WHERE username = ?", (closed_tickets + 1, staff[1]))
                    self.db.conn.commit()

                date = datetime.date.today()
                self.db.cursor.execute(""" 
                    SELECT * FROM date_stats
                    WHERE username = ? AND date = ?
                """, (staff[1], date.strftime("%d.%m.%Y")))
                existing_stat = self.db.cursor.fetchone()
                if existing_stat is not None:
                    self.db.cursor.execute(""" 
                        UPDATE date_stats SET closed_tickets = ?
                        WHERE username = ? AND date = ?
                    """, (existing_stat[3] + 1, staff[1], date.strftime("%d.%m.%Y")))
                else:
                    self.db.cursor.execute(""" 
                        INSERT INTO date_stats (username, date, closed_tickets)
                        VALUES (?, ?, 1)
                    """, (staff[1], date.strftime("%d.%m.%Y")))
                self.db.conn.commit()
            await inter.response.send_modal(Tickets.CreateTicketModal(self.bot, theme))

        select_menu.callback = select_callback
        view.add_item(select_menu)

        if inter.guild is not None:
            await inter.channel.send(embed=embed, view=view)
        else:
            await inter.response.send_message("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", ephemeral=True)
            return
        await inter.response.send_message("–û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.", ephemeral=True)

    class CreateTicketModal(disnake.ui.Modal):
        def __init__(self, bot, theme):
            self.bot = bot
            self.db = Database("database.db")
            self.theme = theme
            super().__init__(title="–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è", components=[
                disnake.ui.ActionRow(
                    disnake.ui.TextInput(
                        label="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è",
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è",
                        style=disnake.TextInputStyle.short,
                        custom_id="description_input",
                        min_length=5,
                        max_length=350
                    )
                )
            ])

            if self.theme in ["–î–æ–ø. —É—Å–ª—É–≥–∏", "–û–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ"]:
                self.components.append(
                    disnake.ui.ActionRow(
                        disnake.ui.TextInput(
                            label="–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å",
                            placeholder="–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å",
                            style=disnake.TextInputStyle.short,
                            custom_id="profile_link_input",
                            min_length=28,
                            max_length=350
                        )
                    )
                )

        async def callback(self, inter):
            self.db.cursor.execute("SELECT status FROM settings WHERE guild_id = ?", (inter.guild.id,))
            status = self.db.cursor.fetchone()
            if status is not None and status[0] == 1:
                await inter.response.send_message("‚õî \ **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã**. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ **–ø–æ–∑–∂–µ**. ‚ö†Ô∏è", ephemeral=True)
                return

            await inter.response.defer(ephemeral=True)
            description = inter.text_values['description_input']

            if self.theme in ["–î–æ–ø. —É—Å–ª—É–≥–∏", "–û–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ"]:
                profile_link = inter.text_values['profile_link_input']

                profiles_links = [
                    "https://yooma.su/ru/profile/",
                    "https://yooma.su/en/profile/",
                    "https://steamcommunity.com/profiles/",
                    "https://steamcommunity.com/id/"
                ]

                for profile in profiles_links:
                    if profile_link.startswith(profile):
                        break
                else:
                    await inter.followup.send("‚õî \ **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ** –≤–≤–µ–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å. –ü—Ä–∏–º–µ—Ä: https://yooma.su/ru/profile/admin", ephemeral=True)
                    return

            self.db.cursor.execute("SELECT counter_tickets FROM settings WHERE guild_id = ?", (inter.guild.id,))
            counter_tickets = self.db.cursor.fetchone()[0]
            self.db.cursor.execute("UPDATE settings SET counter_tickets = ? WHERE guild_id = ?", (counter_tickets + 1, inter.guild.id))
            self.db.conn.commit()
            thread = await inter.channel.create_thread(name=f"ticket-{counter_tickets + 1}", type=disnake.ChannelType.private_thread)
            await thread.edit(invitable=False, auto_archive_duration=disnake.ThreadArchiveDuration.week)

            thread_number = int(thread.name.split("-")[1])
            self.db.cursor.execute("INSERT INTO created_tickets (thread_id, creator_username, creator_id, thread_number) VALUES (?, ?, ?, ?)",
                                    (thread.id, inter.author.name, inter.author.id, thread_number))
            self.db.conn.commit()

            self.db.cursor.execute("SELECT embed_color FROM settings WHERE guild_id = ?", (inter.guild.id,))
            embed_color = self.db.cursor.fetchone()[0]
            embed_color = disnake.Color(int(embed_color.lstrip('#'), 16))

            ticket_embed = disnake.Embed(
                title="üé´ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ Yooma Support",
                description=(
                    "**–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ**, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–º–æ—á—å –≤–∞–º **–±—ã—Å—Ç—Ä–µ–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ**.\n\n"
                    
                    "üîπ **–í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:**\n"
                    "- –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏ –µ—ë —Ç–µ–º—É.\n"
                    "- –£–∫–∞–∂–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∏–∫–Ω–µ–π–º—ã, —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ —Ç.–¥.).\n"
                    "- –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.\n\n"
                ),
                color=embed_color
            )
            ticket_embed.add_field(name="", value="*–ü—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª: —Ç–∏–∫–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ –∑–∞–∫—Ä—ã—Ç, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –Ω–∞–∫–∞–∑–∞–Ω–∏—è.*")
            ticket_embed.set_author(name="Yooma Support", icon_url="https://static2.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")
            ticket_embed.set_thumbnail(url="https://static1.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")

            view = disnake.ui.View(timeout=None)
            take_button = disnake.ui.Button(label="–í–∑—è—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", emoji="üìù", custom_id="take_ticket", style=disnake.ButtonStyle.primary)
            close_button = disnake.ui.Button(label="–ó–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", emoji="üîí", custom_id="close_ticket", style=disnake.ButtonStyle.danger)
            view.add_item(take_button)
            view.add_item(close_button)

            self.db.cursor.execute("SELECT mention, user_id FROM staff_list WHERE mention = 1")
            results = self.db.cursor.fetchall()

            ping_message = ""
            for result in results:
                user_id = result[1]
                ping_message += f"<@{user_id}> "

            if ping_message:
                mention = await thread.send(ping_message)
                await mention.delete()
            else:
                pass

            await thread.send(inter.user.mention, embed=ticket_embed, view=view)

            self.db.cursor.execute("SELECT primetime FROM settings WHERE guild_id = ?", (inter.guild.id,))
            primetime = self.db.cursor.fetchone()
            if primetime is not None:
                primetime = primetime[0]
                start_time, end_time = primetime.split(" - ")
                start_hour, start_minute = map(int, start_time.split(":"))
                end_hour, end_minute = map(int, end_time.split(":"))
                current_time = datetime.datetime.now()
                current_hour = current_time.hour
                current_minute = current_time.minute
                if not (start_hour <= current_hour < end_hour or (current_hour == end_hour and current_minute <= end_minute)):
                    await thread.send(f"{inter.user.mention}, –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, –∏ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º –æ–±—ã—á–Ω–æ.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –Ω–∞ —Å–≤—è–∑–∏, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å–º–æ–∂–µ–º.")
                    pass

            info_embed = disnake.Embed(title=f"–ö—Ä–∞—Ç–∫–∞—è —Å—É—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è: {self.theme}", description=description, color=0xF0C43F)
            if self.theme in ["–î–æ–ø. —É—Å–ª—É–≥–∏", "–û–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ"]:
                info_embed.add_field(name="–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å", value=profile_link, inline=False)
            await thread.send(embed=info_embed)

            await inter.followup.send(rf":tickets:  \ **–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω–æ** - {thread.mention}", ephemeral=True)

    @commands.Cog.listener()
    async def on_button_click(self, inter):
        if inter.data.custom_id == "take_ticket":
            async with self.lock:
                try:
                    logger.info(f"[TICKETS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} –ø—ã—Ç–∞–µ—Ç—Å—è –≤–∑—è—Ç—å —Ç–∏–∫–µ—Ç {inter.channel.name}")
                    if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
                        await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                        return

                    self.db.cursor.execute("SELECT status FROM settings WHERE guild_id = ?", (inter.guild.id,))
                    status = self.db.cursor.fetchone()
                    if status is not None and status[0] == 1:
                        await inter.response.send_message("‚õî \ **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã**. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–∑—è—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ **–ø–æ–∑–∂–µ**. ‚ö†Ô∏è", ephemeral=True)
                        return

                    await inter.response.defer()

                    self.db.cursor.execute("SELECT taken_username FROM created_tickets WHERE thread_id = ?", (inter.channel.id,))
                    taken_ticket = self.db.cursor.fetchone()
                    if taken_ticket is not None and taken_ticket[0] is not None:
                        await inter.response.send_message("–≠—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ —É–∂–µ –≤–∑—è—Ç–æ!", ephemeral=True)
                        return

                    self.db.cursor.execute("SELECT embed_color FROM settings WHERE guild_id = ?", (inter.guild.id,))
                    embed_color = self.db.cursor.fetchone()[0]
                    embed_color = disnake.Color(int(embed_color.lstrip('#'), 16))

                    ticket_embed = disnake.Embed(
                        title="üé´ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ Yooma Support",
                        description=(
                            "**–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ**, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–º–æ—á—å –≤–∞–º **–±—ã—Å—Ç—Ä–µ–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ**.\n\n"
                            
                            "üîπ **–í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:**\n"
                            "- –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏ –µ—ë —Ç–µ–º—É.\n"
                            "- –£–∫–∞–∂–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∏–∫–Ω–µ–π–º—ã, —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å, —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –∏ —Ç.–¥.).\n"
                            "- –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.\n\n"
                        ),
                        color=embed_color
                    )
                    ticket_embed.add_field(name="", value="*–ü—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –ø—Ä–∞–≤–∏–ª: —Ç–∏–∫–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ä–æ—á–Ω–æ –∑–∞–∫—Ä—ã—Ç, –∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –Ω–∞–∫–∞–∑–∞–Ω–∏—è.*")
                    ticket_embed.set_author(name="Yooma Support", icon_url="https://static2.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")
                    ticket_embed.set_thumbnail(url="https://static1.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")
                    ticket_embed.add_field(name=f"", value=f"üîç –í–∑—è–ª –æ–±—Ä–∞—â–µ–Ω–∏–µ - {inter.author.mention}", inline=False)

                    view = disnake.ui.View(timeout=None)
                    close_button = disnake.ui.Button(label="–ó–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", emoji="üîí", custom_id="close_ticket", style=disnake.ButtonStyle.danger)
                    transfer_button = disnake.ui.Button(label="–ü–µ—Ä–µ–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", emoji="üìù", custom_id="transfer_ticket", style=disnake.ButtonStyle.primary)
                    view.add_item(close_button)
                    view.add_item(transfer_button)

                    await inter.edit_original_response(embed=ticket_embed, view=view)

                    self.db.cursor.execute("SELECT thread_number FROM created_tickets WHERE thread_id = ?", (inter.channel.id,))
                    thread_number = self.db.cursor.fetchone()[0]

                    embed = disnake.Embed(title="", description=f"–£—Å–ø–µ—à–Ω–æ –≤–∑—è–ª—Å—è –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ - {inter.author.mention}", color=0xF0C43F)
                    await inter.followup.send(embed=embed)

                    self.db.cursor.execute("UPDATE created_tickets SET taken_username = ? WHERE thread_id = ?", (inter.author.name, inter.channel.id))
                    self.db.conn.commit()

                    self.db.cursor.execute("SELECT ticket_name FROM staff_list WHERE username = ?", (inter.author.name,))
                    ticket_name = self.db.cursor.fetchone()
                    if ticket_name is not None:
                        ticket_name = ticket_name[0]
                    else:
                        ticket_name = taken_username
                    new_name = f"{ticket_name}-ticket-{thread_number}"
                    await inter.channel.edit(name=new_name)

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞ {inter.channel.name}: {e}")

        if inter.data.custom_id == "close_ticket":
            try:
                self.db.cursor.execute("SELECT status FROM settings WHERE guild_id = ?", (inter.guild.id,))
                status = self.db.cursor.fetchone()
                if status is not None and status[0] == 1:
                    await inter.response.send_message("‚õî \ **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã**. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ **–ø–æ–∑–∂–µ**. ‚ö†Ô∏è", ephemeral=True)
                    return
                logger.info(f"[TICKETS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç {inter.channel.name}")
                confirmation_embed = disnake.Embed(
                    title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                    description="–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ?",
                    color=0xF0C43F,
                )
                view = disnake.ui.View(timeout=30)
                close_button = disnake.ui.Button(label="–ó–∞–∫—Ä—ã—Ç—å", emoji='üîí', custom_id="confirm_close_ticket", style=disnake.ButtonStyle.red)
                close_with_reason_button = disnake.ui.Button(label='–ó–∞–∫—Ä—ã—Ç—å —Å –ø—Ä–∏—á–∏–Ω–æ–π', custom_id="confirm_close_with_reason_ticket", style=disnake.ButtonStyle.red, emoji='üîí')
                cancel_button = disnake.ui.Button(label="–û—Ç–º–µ–Ω–∞", emoji='üö´', custom_id="cancel_close_ticket", style=disnake.ButtonStyle.gray)
                view.add_item(close_button)
                view.add_item(close_with_reason_button)
                view.add_item(cancel_button)

                await inter.response.send_message(embed=confirmation_embed, view=view)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞ {inter.channel.name}: {e}")

        if inter.data.custom_id == "cancel_close_ticket":
            await inter.message.delete()

        if inter.data.custom_id == "confirm_close_ticket":
            try:
                self.db.cursor.execute("SELECT status FROM settings WHERE guild_id = ?", (inter.guild.id,))
                status = self.db.cursor.fetchone()
                if status is not None and status[0] == 1:
                    await inter.response.send_message("‚õî \ **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã**. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ **–ø–æ–∑–∂–µ**. ‚ö†Ô∏è", ephemeral=True)
                    return
                
                await inter.message.delete()
                logger.info(f"[TICKETS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞ {inter.channel.name}")
                self.db.cursor.execute("SELECT embed_color FROM settings WHERE guild_id = ?", (inter.guild.id,))
                embed_color = self.db.cursor.fetchone()[0]
                embed_color = disnake.Color(int(embed_color.lstrip('#'), 16))
                self.db.cursor.execute("SELECT taken_username FROM created_tickets WHERE thread_id = ?", (inter.channel.id,))
                taken_username = self.db.cursor.fetchone()
                if taken_username is None or taken_username[0] is None:
                    embed1 = disnake.Embed(
                        description=f"–û–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ - {inter.user.mention}",
                        color=0xF0C43F,
                    )
                    embed2 = disnake.Embed(
                        description=f"–û–±—Ä–∞—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
                        color=0xF0C43F,
                    )
                    await inter.response.defer()
                    await inter.channel.send(embed=embed1)
                    await inter.channel.send(embed=embed2)
                    await asyncio.sleep(5)
                    await inter.channel.delete()
                    self.db.cursor.execute("DELETE FROM created_tickets WHERE thread_id = ?", (inter.channel.id,))
                    self.db.conn.commit()
                    return
                else:
                    taken_username = taken_username[0]
                    self.db.cursor.execute("SELECT closed_tickets FROM staff_list WHERE username = ?", (taken_username,))
                    closed_tickets = self.db.cursor.fetchone()[0]
                    self.db.cursor.execute("UPDATE staff_list SET closed_tickets = ? WHERE username = ?", (closed_tickets + 1, taken_username))
                    self.db.conn.commit()
                    embed1 = disnake.Embed(
                        description=f"–û–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ - {inter.user.mention}",
                        color=0xF0C43F,
                    )
                    embed2 = disnake.Embed(
                        description=f"–û–±—Ä–∞—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
                        color=0xF0C43F,
                    )
                    await inter.response.defer()
                    await inter.channel.send(embed=embed1)
                    await inter.channel.send(embed=embed2)
                    self.db.cursor.execute("SELECT creator_id, thread_number FROM created_tickets WHERE thread_id = ?", (inter.channel.id,))
                    creator_id, thread_number = self.db.cursor.fetchone()
                    creator = await self.bot.fetch_user(creator_id)
                    if creator is not None:
                        embed = disnake.Embed(title="–í–∞—à –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ", timestamp=datetime.datetime.now(), color=embed_color)
                        embed.add_field(name=":id: Ticket ID", value=thread_number, inline=True)
                        embed.add_field(name=":unlock: –û—Ç–∫—Ä—ã–ª", value=creator.mention, inline=True)
                        embed.add_field(name=":lock: –ó–∞–∫—Ä—ã–ª", value=inter.author.mention, inline=True)
                        embed.add_field(name="", value="", inline=False)
                        staff_member = self.db.cursor.execute("SELECT username FROM staff_list WHERE username = ?", (inter.author.name,)).fetchone()
                        if staff_member is not None:
                            self.db.cursor.execute("SELECT user_id FROM staff_list WHERE username = ?", (taken_username,))
                            staff_member_id = self.db.cursor.fetchone()[0]
                            embed.add_field(name=":mag_right: –í–∑—è–ª –æ–±—Ä–∞—â–µ–Ω–∏–µ", value=f"<@{staff_member_id}>", inline=True)
                        # embed.add_field(name="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", value="", inline=False)
                        embed.set_author(name="Yooma Support", icon_url="https://static2.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")
                        try:
                            await creator.send(embed=embed)
                        except disnake.HTTPException as e:
                            if e.status == 403:
                                pass
                    date = datetime.date.today()
                    self.db.cursor.execute(""" 
                        SELECT * FROM date_stats
                        WHERE username = ? AND date = ?
                    """, (taken_username, date.strftime("%d.%m.%Y")))
                    existing_stat = self.db.cursor.fetchone()
                    if existing_stat is None:
                        self.db.cursor.execute(""" 
                            INSERT INTO date_stats (username, date, closed_tickets)
                            VALUES (?, ?, 1)
                        """, (taken_username, date.strftime("%d.%m.%Y")))
                    else:
                        self.db.cursor.execute(""" 
                            UPDATE date_stats SET closed_tickets = ?
                            WHERE username = ? AND date = ?
                        """, (existing_stat[3] + 1, taken_username, date.strftime("%d.%m.%Y")))
                    self.db.conn.commit()
                    await asyncio.sleep(5)
                    await inter.channel.delete()
                    self.db.cursor.execute("DELETE FROM created_tickets WHERE thread_id = ?", (inter.channel.id,))
                    self.db.conn.commit()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞ {inter.channel.name}: {e}")

        if inter.data.custom_id == "confirm_close_with_reason_ticket":
            try:
                
                logger.info(f"[TICKETS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞ —Å –ø—Ä–∏—á–∏–Ω–æ–π {inter.channel.name}")
                if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
                    await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                    return

                self.db.cursor.execute("SELECT status FROM settings WHERE guild_id = ?", (inter.guild.id,))
                status = self.db.cursor.fetchone()
                if status is not None and status[0] == 1:
                    await inter.response.send_message("‚õî \ **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã**. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Å –ø—Ä–∏—á–∏–Ω–æ–π –æ–±—Ä–∞—â–µ–Ω–∏–µ **–ø–æ–∑–∂–µ**. ‚ö†Ô∏è", ephemeral=True)
                    return

                self.db.cursor.execute("SELECT taken_username FROM created_tickets WHERE thread_id = ?", (inter.channel.id,))
                taken_username = self.db.cursor.fetchone()
                if taken_username is not None:
                    taken_username = taken_username[0]

                class CloseTicketModal(disnake.ui.Modal):
                    def __init__(self, taken_username, bot):
                        self.taken_username = taken_username
                        self.bot = bot
                        self.db = Database("database.db")
                        super().__init__(title="–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è", components=[
                            disnake.ui.ActionRow(
                                disnake.ui.TextInput(
                                    label="–ü—Ä–∏—á–∏–Ω–∞",
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è",
                                    style=disnake.TextInputStyle.short,
                                    custom_id="reason_input"
                                )
                            )
                        ])

                    async def callback(self, inter):
                        self.db.cursor.execute("SELECT embed_color FROM settings WHERE guild_id = ?", (inter.guild.id,))
                        embed_color = self.db.cursor.fetchone()[0]
                        embed_color = disnake.Color(int(embed_color.lstrip('#'), 16))
                        embed1 = disnake.Embed(
                            description=f"–û–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ - {inter.user.mention}",
                            color=0xF0C43F
                        )
                        embed2 = disnake.Embed(
                            description=f"–û–±—Ä–∞—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
                            color=0xF0C43F
                        )
                        await inter.response.defer()
                        await inter.channel.send(embed=embed1)
                        await inter.channel.send(embed=embed2)
                        reason = inter.text_values['reason_input']
                        self.db.cursor.execute("SELECT creator_id, thread_number FROM created_tickets WHERE thread_id = ?", (inter.channel.id,))
                        creator_id, thread_number = self.db.cursor.fetchone()
                        creator = await self.bot.fetch_user(creator_id)
                        if creator is not None:
                            embed = disnake.Embed(title="–í–∞—à –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ", timestamp=datetime.datetime.now(), color=embed_color)
                            embed.add_field(name=":id: Ticket ID", value=thread_number, inline=True)
                            embed.add_field(name=":unlock: –û—Ç–∫—Ä—ã–ª", value=creator.mention, inline=True)
                            embed.add_field(name=":lock: –ó–∞–∫—Ä—ã–ª", value=inter.author.mention, inline=True)
                            embed.add_field(name="", value="", inline=False)
                            staff_member = self.db.cursor.execute("SELECT username FROM staff_list WHERE username = ?", (inter.author.name,)).fetchone()
                            if staff_member is not None:
                                embed.add_field(name=":mag_right: –í–∑—è–ª –æ–±—Ä–∞—â–µ–Ω–∏–µ", value=f"<@{inter.author.id}>", inline=True)
                            # embed.add_field(name="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", value="", inline=False)
                            embed.add_field(name=":pencil: –°–æ–æ–±—â–µ–Ω–∏–µ", value=reason, inline=False)
                            embed.set_author(name="Yooma Support", icon_url="https://static2.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")
                            try:
                                await creator.send(embed=embed)
                            except disnake.HTTPException as e:
                                if e.status == 403:
                                    pass

                        if self.taken_username is not None:
                            self.db.cursor.execute("SELECT closed_tickets FROM staff_list WHERE username = ?", (self.taken_username,))
                            closed_tickets = self.db.cursor.fetchone()
                            if closed_tickets is not None:
                                closed_tickets = closed_tickets[0]
                                self.db.cursor.execute("UPDATE staff_list SET closed_tickets = ? WHERE username = ?", (closed_tickets + 1, self.taken_username))
                                self.db.conn.commit()
                            else:
                                await inter.response.send_message("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
                                return
                        else:
                            await inter.response.send_message("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", ephemeral=True)
                            return

                        date = datetime.date.today()
                        self.db.cursor.execute(""" 
                            SELECT * FROM date_stats
                            WHERE username = ? AND date = ?
                        """, (self.taken_username, date.strftime("%d.%m.%Y")))
                        existing_stat = self.db.cursor.fetchone()
                        if existing_stat is not None:
                            self.db.cursor.execute(""" 
                                UPDATE date_stats SET closed_tickets = ?
                                WHERE username = ? AND date = ?
                            """, (existing_stat[3] + 1, self.taken_username, date.strftime("%d.%m.%Y")))
                        else:
                            self.db.cursor.execute(""" 
                                INSERT INTO date_stats (username, date, closed_tickets)
                                VALUES (?, ?, 1)
                            """, (self.taken_username, date.strftime("%d.%m.%Y")))

                        self.db.conn.commit()
                        self.db.cursor.execute("DELETE FROM created_tickets WHERE thread_id = ?", (inter.channel.id,))
                        self.db.conn.commit()
                        await asyncio.sleep(5)
                        await inter.channel.delete()

                await inter.response.send_modal(CloseTicketModal(taken_username, self.bot))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞ —Å –ø—Ä–∏—á–∏–Ω–æ–π {inter.channel.name}: {e}")

        if inter.data.custom_id == "transfer_ticket":

            if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                return
            
            self.db.cursor.execute("SELECT status FROM settings WHERE guild_id = ?", (inter.guild.id,))
            status = self.db.cursor.fetchone()
            if status is not None and status[0] == 1:
                await inter.response.send_message("‚õî \ **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã**. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ **–ø–æ–∑–∂–µ**. ‚ö†Ô∏è", ephemeral=True)
                return

            self.db.cursor.execute("SELECT taken_username FROM created_tickets WHERE thread_id = ?", (inter.channel.id,))
            taken_username = self.db.cursor.fetchone()[0]

            if taken_username is None:
                await inter.response.send_message("–≠—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –≤–∑—è—Ç–æ!", ephemeral=True)
                return

            if taken_username != inter.author.name:
                await inter.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º!", ephemeral=True)
                return

            class TransferTicketModal(disnake.ui.Modal):
                def __init__(self, bot):
                    self.bot = bot
                    self.db = Database("database.db")
                    super().__init__(title="–ü–µ—Ä–µ–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", components=[
                        disnake.ui.ActionRow(
                            disnake.ui.TextInput(
                                label="–Æ–∑–µ—Ä–Ω–µ–π–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                                placeholder="–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                                style=disnake.TextInputStyle.short,
                                custom_id="staff_name_input"
                            )
                        )
                    ])

                async def callback(self, inter):
                    staff_name = inter.text_values['staff_name_input']
                    self.db.cursor.execute("SELECT * FROM staff_list WHERE username = ?", (staff_name,))
                    staff_member = self.db.cursor.fetchone()
                    if staff_member is None:
                        await inter.response.send_message("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
                        return

                    self.db.cursor.execute("UPDATE created_tickets SET taken_username = ? WHERE thread_id = ?", (staff_name, inter.channel.id))
                    self.db.conn.commit()

                    thread_number = self.db.cursor.execute("SELECT thread_number FROM created_tickets WHERE thread_id = ?", (inter.channel.id,)).fetchone()[0]

                    self.db.cursor.execute("SELECT ticket_name FROM staff_list WHERE username = ?", (staff_name,))
                    ticket_name = self.db.cursor.fetchone()
                    if ticket_name is not None:
                        ticket_name = ticket_name[0]
                    else:
                        ticket_name = taken_username
                    new_name = f"{ticket_name}-ticket-{thread_number}"
                    await inter.channel.edit(name=new_name)

                    self.db.cursor.execute("SELECT user_id FROM staff_list WHERE username = ?", (staff_name,))
                    staff_member_id = self.db.cursor.fetchone()[0]
                    embed = disnake.Embed(title="", description=f"–û–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ - <@{staff_member_id}>", color=0xF0C43F)
                    await inter.response.send_message(embed=embed)
                    ticket_embed = disnake.Embed(
                        title="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –∫–ª–∏–µ–Ω—Å—Ç–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                        description="–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, **–æ–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–¥—Ä–æ–±–Ω–µ–µ**, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ–∫–∞–∑–∞—Ç—å –≤–∞–º **–Ω–∞–∏–ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ**.\n\n"
                        "‚ñé–í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:\n"
                        "- –ù–µ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º–µ –∏–ª–∏ –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å –æ–ø–∏—Å–∞–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π.\n"
                        "- –£–∫–∞–∂–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Ä–µ—à–∏—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n"
                        "- –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤.\n\n"
                        "**–ù–µ—Å–æ–±–ª—é–¥–µ–Ω–∏–µ —ç—Ç–∏—Ö –ø—Ä–∞–≤–∏–ª –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–∞–∫–∞–∑–∞–Ω–∏—é**.",
                        color=embed_color
                    )
                    ticket_embed.set_author(name='Yooma Support', icon_url="https://static2.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")
                    ticket_embed.set_thumbnail(url="https://static1.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")
                    ticket_embed.add_field(name=f"", value=f"üîç –í–∑—è–ª –æ–±—Ä–∞—â–µ–Ω–∏–µ - <@{staff_member_id}>", inline=False)

                    view = disnake.ui.View(timeout=None)
                    close_button = disnake.ui.Button(label="–ó–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", emoji="üîí", custom_id="close_ticket", style=disnake.ButtonStyle.danger)
                    transfer_button = disnake.ui.Button(label="–ü–µ—Ä–µ–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", emoji="üìù", custom_id="transfer_ticket", style=disnake.ButtonStyle.primary)
                    view.add_item(close_button)
                    view.add_item(transfer_button)

                    await inter.message.edit(embed=ticket_embed, view=view)

            await inter.response.send_modal(TransferTicketModal(self.bot))


def setuptickets(bot):
    bot.add_cog(Tickets(bot))