import disnake, asyncio, datetime
from disnake.ext import commands
from database import Database

class Tickets(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = Database("database.db")
        self.lock = asyncio.Lock()
    
    @staticmethod
    def check_staff_permissions(inter, required_role):
        db = Database("database.db")
        db.cursor.execute("SELECT * FROM staff_list WHERE username = ? AND user_id = ?", (inter.author.name, inter.author.id))
        staff_member = db.cursor.fetchone()
        
        if staff_member is None:
            return False
        
        if staff_member[4] != required_role:
            return False
        
        return True
    
    def update_ban_time(self, user_id, time):
        self.db.cursor.execute("SELECT * FROM banned_users WHERE user_id = ?", (user_id,))
        banned_user = self.db.cursor.fetchone()

        if banned_user is not None:
            current_time = datetime.datetime.now()
            ban_until = datetime.datetime.strptime(banned_user[3], "%d.%m.%Y %H:%M")

            if current_time >= ban_until:
                self.db.cursor.execute("DELETE FROM banned_users WHERE user_id = ?", (user_id,))
                self.db.conn.commit()

    @commands.slash_command(description="[DEV] - –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")
    async def sum(self, inter, username: str, value: str):
        if not self.check_staff_permissions(inter, "dev"):
            await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
            return

        self.db.cursor.execute("SELECT * FROM staff_list WHERE username = ?", (username,))
        staff_member = self.db.cursor.fetchone()

        if staff_member is None:
            await inter.response.send_message("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            return

        try:
            value = int(value)
        except ValueError:
            await inter.response.send_message("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è", ephemeral=True)
            return

        new_value = staff_member[5] + value
        if new_value < 0:
            new_value = 0

        self.db.cursor.execute("UPDATE staff_list SET closed_tickets = ? WHERE username = ?", (new_value, username))
        self.db.conn.commit()

        await inter.response.send_message(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {username} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {new_value}", ephemeral=True)

    @commands.slash_command(description="[DEV] - –†–∞–∑—Ä–µ—à–∏—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
    async def ticketunban(self, inter, user_id: str):
        if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
            await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
            return
        self.db.cursor.execute("DELETE FROM banned_users WHERE user_id = ?", (user_id,))
        self.db.conn.commit()
        await inter.response.send_message(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–π–¥–∏—à–Ω–∏–∫–æ–º {user_id} —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ.", ephemeral=True)

    @commands.slash_command(description="[DEV] - –ó–∞–ø—Ä–µ—Ç–∏—Ç—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –≤—Ä–µ–º—è")
    async def ticketban(self, inter, user_id: str, time: str):
        if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
            await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
            return
        time_map = {
            's': 1,
            'm': 60,
            'h': 3600,
            'd': 86400
        }

        try:
            value = int(time[:-1])
            unit = time[-1]
            if unit not in time_map:
                await inter.response.send_message("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏", ephemeral=True)
                return
            total_seconds = value * time_map[unit]
            ban_until = datetime.datetime.now() + datetime.timedelta(seconds=total_seconds)
            ban_until_str = ban_until.strftime("%d.%m.%Y %H:%M")

            self.db.cursor.execute("INSERT INTO banned_users (user_id, ban_time, ban_until) VALUES (?, ?, ?)", (user_id, time, ban_until_str))
            self.db.conn.commit()
            await inter.response.send_message(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–π–¥–∏—à–Ω–∏–∫–æ–º {user_id} –∑–∞–ø—Ä–µ—â–µ–Ω —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–∞ {time}", ephemeral=True)
        except ValueError:
            await inter.response.send_message("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏", ephemeral=True)

    @commands.slash_command(description="[DEV] - –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è")
    async def ticketmsg(self, inter):
        if not self.check_staff_permissions(inter, "dev"):
            await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
            return
        if inter.guild is not None:
            self.db.cursor.execute(""" 
                SELECT embed_color, category_id, ticket_channel_id 
                FROM settings 
                WHERE guild_id = ?
            """, (inter.guild.id,))
        else:
            self.db.cursor.execute(""" 
                SELECT embed_color, category_id, ticket_channel_id 
                FROM settings 
                WHERE user_id = ?
            """, (inter.author.id,))
        settings = self.db.cursor.fetchone()

        if settings is None:
            await inter.response.send_message("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", ephemeral=True)
            return

        embed_color = disnake.Color(int(settings[0].lstrip('#'), 16))
        category_id = settings[1]
        channel_id = settings[2]

        if inter.guild is not None:
            category = inter.guild.get_channel(category_id)
            channel = inter.guild.get_channel(channel_id)
        else:
            category = None
            channel = None

        if category is None or channel is None:
            await inter.response.send_message("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return

        embed = disnake.Embed(
            title="–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É",
            description="–ú—ã –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º **–ø–æ–¥—Ä–æ–±–Ω–æ** –æ–ø–∏—Å—ã–≤–∞—Ç—å –≤–∞—à–∏ –ø—Ä–æ—Å—å–±—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –æ–∫–∞–∑–∞—Ç—å –≤–∞–º **–±—ã—Å—Ç—Ä—É—é –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –ø–æ–º–æ—â—å**.\n\n"
            "‚ñé–í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:\n"
            "- –ù–µ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º–µ –∏–ª–∏ –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å –æ–ø–∏—Å–∞–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π.\n"
            "- –£–∫–∞–∂–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Ä–µ—à–∏—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n"
            "- –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤.\n\n"
            "**–ù–µ—Å–æ–±–ª—é–¥–µ–Ω–∏–µ —ç—Ç–∏—Ö –ø—Ä–∞–≤–∏–ª –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–∞–∫–∞–∑–∞–Ω–∏—é**.",
            color=embed_color)
        embed.set_author(name='Yooma Support', icon_url="https://static2.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")
        embed.set_thumbnail(url="https://static1.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")

        view = disnake.ui.View()
        button = disnake.ui.Button(label="–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", emoji="üì®", custom_id="create_ticket", style=disnake.ButtonStyle.primary)
        view.add_item(button)

        if inter.guild is not None:
            await channel.send(embed=embed, view=view)
        else:
            await inter.response.send_message("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", ephemeral=True)
            return
        await inter.response.send_message("–û—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.", ephemeral=True)

    @commands.Cog.listener()
    async def on_button_click(self, inter):
        self.db.cursor.execute(""" 
            SELECT embed_color, category_id, ticket_channel_id 
            FROM settings 
            WHERE guild_id = ?
        """, (inter.guild.id,))
        settings = self.db.cursor.fetchone()

        if settings is None:
            await inter.response.send_message("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", ephemeral=True)
            return

        embed_color = disnake.Color(int(settings[0].lstrip('#'), 16))
        if inter.data.custom_id == "create_ticket":
            self.db.cursor.execute("SELECT status FROM settings WHERE guild_id = ?", (inter.guild.id,))
            status = self.db.cursor.fetchone()

            if status is not None and status[0] == 0:
                await inter.response.send_message("üöß –¢–µ—Ö—Ä–∞–±–æ—Ç—ã. –ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! –°–∫–æ—Ä–æ –≤—Å—ë –ø–æ—á–∏–Ω–∏–º! üîß‚ú®", ephemeral=True)
                return
            self.db.cursor.execute("SELECT * FROM banned_users WHERE user_id = ?", (inter.author.id,))
            banned_user = self.db.cursor.fetchone()
            if banned_user is not None:
                current_time = datetime.datetime.now()
                ban_until = datetime.datetime.strptime(banned_user[3], "%d.%m.%Y %H:%M")

                if current_time >= ban_until:
                    self.db.cursor.execute("DELETE FROM banned_users WHERE user_id = ?", (inter.author.id,))
                    self.db.conn.commit()
                    await inter.response.send_message("‚úÖ / –í–∞—à –±–∞–Ω —Å–ø–∞–ª. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ.", ephemeral=True)
                    return
                else:
                    await inter.response.send_message(f"üö´ / –í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –¥–æ {ban_until.strftime('%d.%m.%Y %H:%M')}.", ephemeral=True)
                    return
            else:
                pass
            self.db.cursor.execute("SELECT * FROM created_tickets WHERE creator_id = ?", (inter.author.id,))
            existing_ticket = self.db.cursor.fetchone()

            if existing_ticket is not None:
                await inter.response.send_message("üî∏ / –£ –≤–∞—Å —É–∂–µ **–∏–º–µ–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ**. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞", ephemeral=True)
                return
            class CreateTicketModal(disnake.ui.Modal):
                def __init__(self):
                    super().__init__(title="–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è", components=[
                        disnake.ui.ActionRow(
                            disnake.ui.TextInput(
                                label="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è",
                                placeholder="–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è",
                                style=disnake.TextInputStyle.short,
                                custom_id="description_input",
                                min_length=3
                            )
                        )
                    ])
                    self.db = Database("database.db")

                async def callback(self, inter):
                    await inter.response.defer(ephemeral=True)
                    description = inter.text_values['description_input']
                    if len(description) < 3:
                        await inter.response.send_message("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –≤–≤–æ–¥–∞ - 3 —Å–∏–º–≤–æ–ª–∞", ephemeral=True)
                        return

                    self.db.cursor.execute("SELECT counter_tickets FROM settings WHERE guild_id = ?", (inter.guild.id,))
                    counter_tickets = self.db.cursor.fetchone()[0]
                    self.db.cursor.execute("UPDATE settings SET counter_tickets = ? WHERE guild_id = ?", (counter_tickets + 1, inter.guild.id))
                    self.db.conn.commit()
                    thread = await inter.channel.create_thread(name=f"ticket-{counter_tickets + 1}", type=disnake.ChannelType.private_thread)
                    await thread.edit(invitable=False, auto_archive_duration=disnake.ThreadArchiveDuration.week)
                    
                    thread_number = int(thread.name.split("-")[1])
                    self.db.cursor.execute("INSERT INTO created_tickets (thread_id, creator_username, creator_id, thread_number) VALUES (?, ?, ?, ?)", 
                                        (thread.id, inter.author.name, inter.author.id, thread_number))
                    self.db.conn.commit()
                    
                    ticket_embed = disnake.Embed(
                        title="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –∫–ª–∏–µ–Ω—Å—Ç–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                        description="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, **–æ–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–¥—Ä–æ–±–Ω–µ–µ**, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ–∫–∞–∑–∞—Ç—å –≤–∞–º **–Ω–∞–∏–ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ**.\n\n"
                        "‚ñé–í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:\n"
                        "- –ù–µ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º–µ –∏–ª–∏ –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å –æ–ø–∏—Å–∞–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π.\n"
                        "- –£–∫–∞–∂–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Ä–µ—à–∏—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n"
                        "- –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤.\n\n"
                        "**–ù–µ—Å–æ–±–ª—é–¥–µ–Ω–∏–µ —ç—Ç–∏—Ö –ø—Ä–∞–≤–∏–ª –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–∞–∫–∞–∑–∞–Ω–∏—é**.",
                        color=embed_color
                    )
                    ticket_embed.set_author(name='Yooma Support', icon_url="https://static2.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")
                    ticket_embed.set_thumbnail(url="https://static1.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")

                    view = disnake.ui.View(timeout=None)
                    take_button = disnake.ui.Button(label="–í–∑—è—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", emoji="üìù", custom_id="take_ticket", style=disnake.ButtonStyle.primary)
                    close_button = disnake.ui.Button(label="–ó–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", emoji="üîí", custom_id="close_ticket", style=disnake.ButtonStyle.danger)
                    view.add_item(take_button)
                    view.add_item(close_button)

                    self.db.cursor.execute("SELECT mention, user_id FROM staff_list WHERE mention = 1")
                    results = self.db.cursor.fetchall()

                    ping_message = ""
                    for result in results:
                        user_id = result[1]
                        ping_message += f"<@{user_id}> "

                    if ping_message: 
                        mention = await thread.send(ping_message)
                        await mention.delete()
                    else:
                        pass

                    await thread.send(inter.user.mention, embed=ticket_embed, view=view)

                    self.db.cursor.execute("SELECT primetime FROM settings WHERE guild_id = ?", (inter.guild.id,))
                    primetime = self.db.cursor.fetchone()
                    if primetime is not None:
                        primetime = primetime[0]
                        start_time, end_time = primetime.split(" - ")
                        start_hour, start_minute = map(int, start_time.split(":"))
                        end_hour, end_minute = map(int, end_time.split(":"))
                        current_time = datetime.datetime.now()
                        current_hour = current_time.hour
                        current_minute = current_time.minute
                        if not (start_hour <= current_hour < end_hour or (current_hour == end_hour and current_minute <= end_minute)):
                            await thread.send(f"{inter.user.mention}, –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è, –∏ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º –æ–±—ã—á–Ω–æ.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –Ω–∞ —Å–≤—è–∑–∏, –∏ –º—ã –æ—Ç–≤–µ—Ç–∏–º –≤–∞–º, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å–º–æ–∂–µ–º.")
                            pass

                    info_embed = disnake.Embed(
                        title="–ö—Ä–∞—Ç–∫–∞—è —Å—É—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è:",
                        description=description,
                        color=0xF0C43F
                    )
                    await thread.send(embed=info_embed)

                    await inter.followup.send(rf":tickets:  \ **–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω–æ** - {thread.mention}", ephemeral=True)


            await inter.response.send_modal(CreateTicketModal())
        
        if inter.data.custom_id == "take_ticket":
            async with self.lock:
                if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
                    await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                    return

                ticket_embed = disnake.Embed(
                    title="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –∫–ª–∏–µ–Ω—Å—Ç–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                    description="–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, **–æ–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–¥—Ä–æ–±–Ω–µ–µ**, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ–∫–∞–∑–∞—Ç—å –≤–∞–º **–Ω–∞–∏–ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ**.\n\n"
                    "‚ñé–í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:\n"
                    "- –ù–µ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º–µ –∏–ª–∏ –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å –æ–ø–∏—Å–∞–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π.\n"
                    "- –£–∫–∞–∂–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Ä–µ—à–∏—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n"
                    "- –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤.\n\n"
                    "**–ù–µ—Å–æ–±–ª—é–¥–µ–Ω–∏–µ —ç—Ç–∏—Ö –ø—Ä–∞–≤–∏–ª –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–∞–∫–∞–∑–∞–Ω–∏—é**.",
                    color=embed_color
                )
                ticket_embed.set_author(name='Yooma Support', icon_url="https://static2.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")
                ticket_embed.set_thumbnail(url="https://static1.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")
                ticket_embed.add_field(name=f"", value=f"üîç –í–∑—è–ª –æ–±—Ä–∞—â–µ–Ω–∏–µ - {inter.author.mention}", inline=False)

                view = disnake.ui.View(timeout=None)
                close_button = disnake.ui.Button(label="–ó–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", emoji="üîí", custom_id="close_ticket", style=disnake.ButtonStyle.danger)
                transfer_button = disnake.ui.Button(label="–ü–µ—Ä–µ–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", emoji="üìù", custom_id="transfer_ticket", style=disnake.ButtonStyle.primary)
                view.add_item(close_button)
                view.add_item(transfer_button)

                await inter.message.edit(embed=ticket_embed, view=view)

                self.db.cursor.execute("SELECT taken_username FROM created_tickets WHERE thread_id = ?", (inter.channel.id,))
                taken_ticket = self.db.cursor.fetchone()
                if taken_ticket is not None and taken_ticket[0] is not None:
                    await inter.response.send_message("–≠—Ç–æ—Ç –æ–±—Ä–∞—â–µ–Ω–∏–µ —É–∂–µ –≤–∑—è—Ç!", ephemeral=True)
                    return

                self.db.cursor.execute("SELECT thread_number FROM created_tickets WHERE thread_id = ?", (inter.channel.id,))
                thread_number = self.db.cursor.fetchone()[0]
             
                embed = disnake.Embed(title="", description=f"–£—Å–ø–µ—à–Ω–æ –≤–∑—è–ª—Å—è –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ - {inter.author.mention}", color=0xF0C43F,)
                await inter.response.send_message(embed=embed)

                self.db.cursor.execute("UPDATE created_tickets SET taken_username = ? WHERE thread_id = ?", 
                                    (inter.author.name, inter.channel.id))
                self.db.conn.commit()

                self.db.cursor.execute("SELECT ticket_name FROM staff_list WHERE username = ?", (inter.author.name,))
                ticket_name = self.db.cursor.fetchone()
                if ticket_name is not None:
                    ticket_name = ticket_name[0]
                else:
                    ticket_name = taken_username
                new_name = f"{ticket_name}-ticket-{thread_number}"
                await inter.channel.edit(name=new_name)
        
        if inter.data.custom_id == "close_ticket":
            confirmation_embed = disnake.Embed(
                title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                description="–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ?",
                color=0xF0C43F,
            )
            view = disnake.ui.View(timeout=30)
            close_button = disnake.ui.Button(label="–ó–∞–∫—Ä—ã—Ç—å", emoji='üîí', custom_id="confirm_close_ticket", style=disnake.ButtonStyle.red)
            close_with_reason_button = disnake.ui.Button(label='–ó–∞–∫—Ä—ã—Ç—å —Å –ø—Ä–∏—á–∏–Ω–æ–π', custom_id="confirm_close_with_reason_ticket", style=disnake.ButtonStyle.red, emoji='üîí')
            cancel_button = disnake.ui.Button(label="–û—Ç–º–µ–Ω–∞", emoji='üö´', custom_id="cancel_close_ticket", style=disnake.ButtonStyle.gray)
            view.add_item(close_button)
            view.add_item(close_with_reason_button)
            view.add_item(cancel_button)

            await inter.response.send_message(embed=confirmation_embed, view=view)
        
        if inter.data.custom_id == "cancel_close_ticket":
            await inter.message.delete()

        if inter.data.custom_id == "confirm_close_ticket":
            await inter.message.delete()
            self.db.cursor.execute("SELECT taken_username FROM created_tickets WHERE thread_id = ?", (inter.channel.id,))
            taken_username = self.db.cursor.fetchone()
            if taken_username is None:
                embed1 = disnake.Embed(
                    description=f"–û–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ - {inter.user.mention}",
                    color=0xF0C43F,
                )
                embed2 = disnake.Embed(
                    description=f"–û–±—Ä–∞—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
                    color=0xF0C43F,
                )
                await inter.response.defer()
                await inter.channel.send(embed=embed1)
                await inter.channel.send(embed=embed2)
                await asyncio.sleep(5)
                await inter.channel.delete()
                self.db.cursor.execute("DELETE FROM created_tickets WHERE thread_id = ?", (inter.channel.id,))
                self.db.conn.commit()
                return
            else:
                taken_username = taken_username[0]
                self.db.cursor.execute("SELECT closed_tickets FROM staff_list WHERE username = ?", (taken_username,))
                closed_tickets = self.db.cursor.fetchone()[0]
                self.db.cursor.execute("UPDATE staff_list SET closed_tickets = ? WHERE username = ?", (closed_tickets + 1, taken_username))
                self.db.conn.commit()
                embed1 = disnake.Embed(
                    description=f"–û–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ - {inter.user.mention}",
                    color=0xF0C43F,
                )
                embed2 = disnake.Embed(
                    description=f"–û–±—Ä–∞—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
                    color=0xF0C43F,
                )
                await inter.response.defer()
                await inter.channel.send(embed=embed1)
                await inter.channel.send(embed=embed2)
                self.db.cursor.execute("SELECT creator_id, thread_number FROM created_tickets WHERE thread_id = ?", (inter.channel.id,))
                creator_id, thread_number = self.db.cursor.fetchone()
                creator = await self.bot.fetch_user(creator_id)
                if creator is not None:
                    embed = disnake.Embed(title="–í–∞—à –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç",timestamp=datetime.datetime.now(),color=embed_color)
                    embed.add_field(name=":id: Ticket ID", value=thread_number, inline=True)
                    embed.add_field(name=":unlock: –û—Ç–∫—Ä—ã–ª", value=creator.name, inline=True)
                    embed.add_field(name=":lock: –ó–∞–∫—Ä—ã–ª", value=inter.author.name, inline=True)
                    embed.add_field(name="", value="", inline=False)
                    staff_member = self.db.cursor.execute("SELECT username FROM staff_list WHERE username = ?", (inter.author.name,)).fetchone()
                    if staff_member is not None:
                        embed.add_field(name=":mag_right: –í–∑—è–ª –æ–±—Ä–∞—â–µ–Ω–∏–µ", value=f"<@{inter.author.id}>", inline=True)
                    #embed.add_field(name="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", value="", inline=False)
                    embed.set_author(name="Yooma Support", icon_url="https://static2.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")
                    await creator.send(embed=embed)
                date = datetime.date.today()
                self.db.cursor.execute(""" 
                    SELECT * FROM date_stats
                    WHERE username = ? AND date = ?
                """, (taken_username, date.strftime("%d.%m.%Y")))
                existing_stat = self.db.cursor.fetchone()
                if existing_stat is None:
                    self.db.cursor.execute(""" 
                        INSERT INTO date_stats (username, date, closed_tickets)
                        VALUES (?, ?, 1)
                    """, (taken_username, date.strftime("%d.%m.%Y")))
                else:
                    self.db.cursor.execute(""" 
                        UPDATE date_stats SET closed_tickets = ?
                        WHERE username = ? AND date = ?
                    """, (existing_stat[3] + 1, taken_username, date.strftime("%d.%m.%Y")))
                self.db.conn.commit()
                await asyncio.sleep(5)
                await inter.channel.delete()
                self.db.cursor.execute("DELETE FROM created_tickets WHERE thread_id = ?", (inter.channel.id,))
                self.db.conn.commit()
                    
        
        if inter.data.custom_id == "confirm_close_with_reason_ticket":
            await inter.message.delete()
            if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                return
            
            self.db.cursor.execute("SELECT taken_username FROM created_tickets WHERE thread_id = ?", (inter.channel.id,))
            taken_username = self.db.cursor.fetchone()

            if taken_username is not None:
                taken_username = taken_username[0]
                self.db.cursor.execute("SELECT closed_tickets FROM staff_list WHERE username = ?", (taken_username,))
                closed_tickets = self.db.cursor.fetchone()
                if closed_tickets is not None:
                    closed_tickets = closed_tickets[0]
                    self.db.cursor.execute("UPDATE staff_list SET closed_tickets = ? WHERE username = ?", (closed_tickets + 1, taken_username))
                    self.db.conn.commit()
                else:
                    await inter.response.send_message("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
                    return
            else:
                await inter.response.send_message("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", ephemeral=True)
                return

            date = datetime.date.today()
            self.db.cursor.execute(""" 
                SELECT * FROM date_stats
                WHERE username = ? AND date = ?
            """, (taken_username, date.strftime("%d.%m.%Y")))
            existing_stat = self.db.cursor.fetchone()
            if existing_stat is not None:
                self.db.cursor.execute(""" 
                    UPDATE date_stats SET closed_tickets = ?
                    WHERE username = ? AND date = ?
                """, (existing_stat[3] + 1, taken_username, date.strftime("%d.%m.%Y")))
            else:
                self.db.cursor.execute(""" 
                    INSERT INTO date_stats (username, date, closed_tickets)
                    VALUES (?, ?, 1)
                """, (taken_username, date.strftime("%d.%m.%Y")))

            self.db.conn.commit()

            class CloseTicketModal(disnake.ui.Modal):
                def __init__(self, taken_username, bot):
                    self.taken_username = taken_username
                    self.bot = bot
                    self.db = Database("database.db")
                    super().__init__(title="–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è", components=[
                        disnake.ui.ActionRow(
                            disnake.ui.TextInput(
                                label="–ü—Ä–∏—á–∏–Ω–∞",
                                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è",
                                style=disnake.TextInputStyle.short,
                                custom_id="reason_input"
                            )
                        )
                    ])
                async def callback(self, inter):
                    embed1 = disnake.Embed(
                        description=f"–û–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ - {inter.user.mention}",
                        color=0xF0C43F
                    )
                    embed2 = disnake.Embed(
                        description=f"–û–±—Ä–∞—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥",
                        color=0xF0C43F
                    )
                    await inter.response.defer()
                    await inter.channel.send(embed=embed1)
                    await inter.channel.send(embed=embed2)
                    reason = inter.text_values['reason_input']
                    self.db.cursor.execute("SELECT creator_id, thread_number FROM created_tickets WHERE thread_id = ?", (inter.channel.id,))
                    creator_id, thread_number = self.db.cursor.fetchone()
                    creator = await self.bot.fetch_user(creator_id)
                    if creator is not None:
                        embed = disnake.Embed(title="–í–∞—à –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª–æ –∑–∞–∫—Ä—ã—Ç–æ", timestamp=datetime.datetime.now(), color=embed_color)
                        embed.add_field(name=":id: Ticket ID", value=thread_number, inline=True)
                        embed.add_field(name=":unlock: –û—Ç–∫—Ä—ã–ª", value=creator.name, inline=True)
                        embed.add_field(name=":lock: –ó–∞–∫—Ä—ã–ª", value=inter.author.name, inline=True)
                        embed.add_field(name="", value="", inline=False)
                        staff_member = self.db.cursor.execute("SELECT username FROM staff_list WHERE username = ?", (inter.author.name,)).fetchone()
                        if staff_member is not None:
                            embed.add_field(name=":mag_right: –í–∑—è–ª –æ–±—Ä–∞—â–µ–Ω–∏–µ", value=f"<@{inter.author.id}>", inline=True)
                        embed.add_field(name=":pencil: –°–æ–æ–±—â–µ–Ω–∏–µ", value=reason, inline=False)
                        # embed.add_field(name="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", value="", inline=False)
                        embed.set_author(name="Yooma Support", icon_url="https://static2.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")
                        await creator.send(embed=embed)
                    self.db.cursor.execute("DELETE FROM created_tickets WHERE thread_id = ?", (inter.channel.id,))
                    self.db.conn.commit()
                    await asyncio.sleep(5)
                    await inter.channel.delete()

            await inter.response.send_modal(CloseTicketModal(taken_username, self.bot))

        if inter.data.custom_id == "transfer_ticket":
            if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                return

            self.db.cursor.execute("SELECT taken_username FROM created_tickets WHERE thread_id = ?", (inter.channel.id,))
            taken_username = self.db.cursor.fetchone()[0]

            if taken_username is None:
                await inter.response.send_message("–≠—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –≤–∑—è—Ç–æ!", ephemeral=True)
                return

            if taken_username != inter.author.name:
                await inter.response.send_message("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º!", ephemeral=True)
                return

            class TransferTicketModal(disnake.ui.Modal):
                def __init__(self, bot):
                    self.bot = bot
                    self.db = Database("database.db")
                    super().__init__(title="–ü–µ—Ä–µ–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", components=[
                        disnake.ui.ActionRow(
                            disnake.ui.TextInput(
                                label="–Æ–∑–µ—Ä–Ω–µ–π–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                                placeholder="–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                                style=disnake.TextInputStyle.short,
                                custom_id="staff_name_input"
                            )
                        )
                    ])

                async def callback(self, inter):
                    staff_name = inter.text_values['staff_name_input']
                    self.db.cursor.execute("SELECT * FROM staff_list WHERE username = ?", (staff_name,))
                    staff_member = self.db.cursor.fetchone()
                    if staff_member is None:
                        await inter.response.send_message("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
                        return

                    self.db.cursor.execute("UPDATE created_tickets SET taken_username = ? WHERE thread_id = ?", (staff_name, inter.channel.id))
                    self.db.conn.commit()

                    thread_number = self.db.cursor.execute("SELECT thread_number FROM created_tickets WHERE thread_id = ?", (inter.channel.id,)).fetchone()[0]
                    
                    self.db.cursor.execute("SELECT ticket_name FROM staff_list WHERE username = ?", (staff_name,))
                    ticket_name = self.db.cursor.fetchone()
                    if ticket_name is not None:
                        ticket_name = ticket_name[0]
                    else:
                        ticket_name = taken_username
                    new_name = f"{ticket_name}-ticket-{thread_number}"
                    await inter.channel.edit(name=new_name)

                    self.db.cursor.execute("SELECT user_id FROM staff_list WHERE username = ?", (staff_name,))
                    staff_member_id = self.db.cursor.fetchone()[0]
                    embed = disnake.Embed(title="", description=f"–û–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ - <@{staff_member_id}>", color=0xF0C43F)
                    await inter.response.send_message(embed=embed)
                    ticket_embed = disnake.Embed(
                        title="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –∫–ª–∏–µ–Ω—Å—Ç–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                        description="–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, **–æ–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–¥—Ä–æ–±–Ω–µ–µ**, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ–∫–∞–∑–∞—Ç—å –≤–∞–º **–Ω–∞–∏–ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ**.\n\n"
                        "‚ñé–í–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:\n"
                        "- –ù–µ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–µ–º–µ –∏–ª–∏ –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å –æ–ø–∏—Å–∞–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º–æ–π.\n"
                        "- –£–∫–∞–∂–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Ä–µ—à–∏—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n"
                        "- –°–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤.\n\n"
                        "**–ù–µ—Å–æ–±–ª—é–¥–µ–Ω–∏–µ —ç—Ç–∏—Ö –ø—Ä–∞–≤–∏–ª –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–∞–∫–∞–∑–∞–Ω–∏—é**.",
                        color=embed_color
                    )
                    ticket_embed.set_author(name='Yooma Support', icon_url="https://static2.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")
                    ticket_embed.set_thumbnail(url="https://static1.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")
                    ticket_embed.add_field(name=f"", value=f"üîç –í–∑—è–ª –æ–±—Ä–∞—â–µ–Ω–∏–µ - <@{staff_member_id}>", inline=False)

                    view = disnake.ui.View(timeout=None)
                    close_button = disnake.ui.Button(label="–ó–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", emoji="üîí", custom_id="close_ticket", style=disnake.ButtonStyle.danger)
                    transfer_button = disnake.ui.Button(label="–ü–µ—Ä–µ–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ", emoji="üìù", custom_id="transfer_ticket", style=disnake.ButtonStyle.primary)
                    view.add_item(close_button)
                    view.add_item(transfer_button)

                    await inter.message.edit(embed=ticket_embed, view=view)

            await inter.response.send_modal(TransferTicketModal(self.bot))


def setuptickets(bot):
    bot.add_cog(Tickets(bot))