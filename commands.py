import disnake, datetime, logging, random, asyncio
from disnake.ext import commands
from database import Database

from openai import OpenAI

logger = logging.getLogger('bot')
logger.setLevel(logging.INFO)

with open('yootoken.txt', 'r', encoding='utf-8') as file:
    lines = file.readlines()
    apikey = lines[1].strip()

class Settings(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = Database("database.db")
        self.page = 1
        self.stats_message = None
        self.embed_color = disnake.Colour.from_rgb(119, 137, 253)
        self.month_str = None
        self.protected_roles = [
        "üí´", "yooma.su", "YooTick",
        "Akemi", "VK Music Bot", "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫",
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä Discord", "–ö—É—Ä–∞—Ç–æ—Ä", "–ì–ª. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", 
        "–°—Ç. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "–°—Ç. –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", "ServerStats",
        "–ò–≥—Ä–æ–∫", "–ë—É—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞", ""
        ]
    
    @staticmethod
    def check_staff_permissions(inter, required_role):
        db = Database("database.db")
        db.cursor.execute("SELECT * FROM staff_list WHERE username = ? AND user_id = ?", (inter.author.name, inter.author.id))
        staff_member = db.cursor.fetchone()
        
        if staff_member is None:
            return False
        if staff_member[4] != required_role:
            return False
        
        return True
    
    def is_protected_role(self, role):
        if role.name.lower() in [str(x).lower() for x in self.protected_roles]:
            return True
        return False

    def get_completion(self, question: str):
        client = OpenAI(
            base_url="https://openrouter.ai/api/v1",
            api_key=apikey,
        )
        try:
            completion = client.chat.completions.create(
                model="deepseek/deepseek-chat-v3-0324:free",
                messages=[
                    {
                        "role": "user",
                        "content": [
                            {
                                "type": "text",
                                "text": f"{question}. –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ"
                            }
                        ]
                    },
                ],
            )
            return completion
        except Exception as e:
            error_data = e.error
            error_message = f"Error {error_data['code']}: {error_data['message']}"
            logger.error(f"[COMMANDS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {error_message}")
            return None

    @commands.slash_command(description="–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏!")
    async def ai(self, inter, question: str):
        await inter.response.defer()
        db = Database("database.db")
        settings = db.get_settings(guild_id=inter.guild.id)
        aichat_channel_id = settings[6]

        if inter.channel.id != aichat_channel_id:
            await inter.followup.send(f"‚ö†Ô∏è \ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ **—Ç–æ–ª—å–∫–æ –≤ <#{aichat_channel_id}>**")
            return

        loop = asyncio.get_event_loop()
        completion = await loop.run_in_executor(None, self.get_completion, question)

        if hasattr(completion, 'error'):
            await inter.edit_original_response(content="–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")
            logger.error(f"[COMMANDS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {completion.error}")
            return

        if len(completion.choices[0].message.content) > 4095:
            chunks = [completion.choices[0].message.content[i:i+4095] for i in range(0, len(completion.choices[0].message.content), 4095)]
            for i, chunk in enumerate(chunks):
                embed = disnake.Embed(
                    title=f"`{question}`",
                    description=f"> –û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:\n {chunk}",
                    color=self.embed_color
                )
                embed.set_author(name='Yooma Support', icon_url="https://static2.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")
                embed.set_footer(text=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ: Deepseek-V3-0324")
                if i == 0:
                    await inter.edit_original_response(embed=embed)
                else:
                    await inter.followup.send(embed=embed)
        else:
            embed = disnake.Embed(
                title=f"`{question}`",
                description=f"> –û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏:\n {completion.choices[0].message.content}",
                color=self.embed_color
            )
            embed.set_author(name='Yooma Support', icon_url="https://static2.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")
            embed.set_footer(text=f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ: Deepseek-V3-0324")
            await inter.edit_original_response(embed=embed)


    @commands.slash_command(description="[STAFF] - –ü–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–∏–∫–µ—Ç")
    async def proofs(self, inter: disnake.ApplicationCommandInteraction, user: disnake.Member):
        if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
            await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
            logger.info(f"[COMMANDS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /fastcommands, –Ω–æ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
            return
        await inter.response.send_message(f"–ù–∞–ø–∏—Å–∞–ª {user.mention} –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—å–±–µ —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç.", ephemeral=True)
        embed = disnake.Embed(
            title="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",
            description=f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, **–Ω–∞–ø–∏—à–∏—Ç–µ —Ç–∏–∫–µ—Ç** –≤ –Ω–∞—à–µ–º –¥–∏—Å–∫–æ—Ä–¥ —Å–µ—Ä–≤–µ—Ä–µ.\n–ò–≥–Ω–æ—Ä–∏—Ä—É—è –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å **–Ω–∞–∫–∞–∑–∞–Ω–∏–µ**.",
            color=self.embed_color
        )
        embed.set_author(name='Yooma Support', icon_url="https://static2.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")
        embed.set_footer(text=f"–û—Ç–ø—Ä–∞–≤–∏–ª: {inter.author.name}")
        view = disnake.ui.View()
        button = disnake.ui.Button(label="–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç", url="https://discord.com/channels/1090281117740961922/1185623131747004446/1359596457115779214")
        view.add_item(button)
        await user.send(embed=embed, view=view)

        
    @commands.slash_command(description="–ü–æ–º–æ—â–Ω–∏–∫ –≤ –≤—ã–±–æ—Ä–µ. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /choicehelper <–≤–∞—Ä–∏–∞–Ω—Ç1> <–≤–∞—Ä–∏–∞–Ω—Ç2>.. - –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
    async def choicehelper(self, inter, *, options: str):
        try:
            options_list = options.split()
            if len(options_list) < 2:
                await inter.response.send_message("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞", ephemeral=True)
                return
            
            animation = [
                "üé≤ –í—ã–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç...\n",
                "üîÑ –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–º–µ—à–∏–≤–∞—é—Ç—Å—è...\n",
                "üòà –ü–æ–¥–∫—Ä—É—á–∏–≤–∞–µ–º —Å–∞–º—ã–π —É–∂–∞—Å–Ω—ã–π –∏—Å—Ö–æ–¥ –¥–ª—è –≤–∞—Å!\n",
                "üéâ –í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω!\n",
            ]
            
            await inter.response.send_message(animation[0])
            message = await inter.original_response()
            for i in range(1, len(animation)):
                await asyncio.sleep(0.65)
                await message.edit(content=animation[i])
            
            chosen_option = random.choice(options_list)
            chance = 100 / len(options_list)
            await message.edit(content=f"üéâ –í—ã–±—Ä–∞–Ω–æ: **{chosen_option}** üéä\n–®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è: **{chance}%**")
        except Exception as e:
            await inter.followup.send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞", ephemeral=True)
            logger.error(f"[COMMANDS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞: {e}")

    @commands.slash_command(description="–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–∞")
    async def ping(self, inter):
        try:
            await inter.response.send_message(f"Pong: {self.bot.latency * 1000:.2f}ms")
            logger.info(f"[COMMANDS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /ping")
        except Exception as e:
            await inter.response.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏–Ω–≥–∞", ephemeral=True)
            logger.error(f"[COMMANDS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏–Ω–≥–∞: {e}")

    @commands.slash_command(description="[DEV] - yootick msg")
    async def staffsettingsmsg(self, inter):
        if not self.check_staff_permissions(inter, "dev"):
            await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
            return

        self.db.cursor.execute("SELECT staff_settings_channel_id FROM settings WHERE guild_id = ?", (inter.guild.id,))
        staff_settings_channel_id = self.db.cursor.fetchone()
        if staff_settings_channel_id is None:
            await inter.response.send_message("–ö–∞–Ω–∞–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            return

        staff_settings_channel_id = staff_settings_channel_id[0]
        staff_settings_channel = inter.guild.get_channel(staff_settings_channel_id)
        if staff_settings_channel is None:
            await inter.response.send_message("–ö–∞–Ω–∞–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
            return

        self.db.cursor.execute("SELECT * FROM created_tickets")
        all_tickets = self.db.cursor.fetchall()
        self.db.cursor.execute("SELECT * FROM created_tickets WHERE taken_username IS NULL")
        free_tickets = self.db.cursor.fetchall()

        embed = disnake.Embed(
            title="–ü–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ç–∏–∫–µ—Ç–∞–º",
            description=f"–ê–∫—Ç–∏–≤–Ω—ã–µ: **{len(all_tickets)}**\n–°–≤–æ–±–æ–¥–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã: **{len(free_tickets)}**\n\n"
                        f"üîÑ - –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–∏–∫–µ—Ç–∞–º\n"
                        f"üîî - –ü–∏–Ω–≥ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞\n"
                        f"üìù - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —Ç–∏–∫–µ—Ç–∞\n"
                        f"üìä - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã\n\n"
                        f"‚ö†Ô∏è - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ—Ä–º–µ\n"
                        f"üë• - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            color=self.embed_color
        )
        embed.set_author(name='Yooma Support', icon_url="https://static2.tgstat.ru/channels/_0/a1/a1f39d6ec06f314bb9ae1958342ec5fd.jpg")
        
        view = disnake.ui.View()
        view.add_item(disnake.ui.Button(emoji="üîÑ", custom_id="update_staff_settings", style=disnake.ButtonStyle.gray))
        view.add_item(disnake.ui.Button(emoji="üîî", custom_id="ping", style=disnake.ButtonStyle.gray))
        view.add_item(disnake.ui.Button(emoji="üìù", custom_id="ticket_name", style=disnake.ButtonStyle.gray))
        view.add_item(disnake.ui.Button(emoji="üìä", custom_id="active_tickets", style=disnake.ButtonStyle.gray))
        view.add_item(disnake.ui.Button(emoji="‚ö†Ô∏è", custom_id="daily_quota", style=disnake.ButtonStyle.gray, row=1))
        view.add_item(disnake.ui.Button(emoji="üë•", custom_id="manage_roles", style=disnake.ButtonStyle.gray, row=1))
        
        await staff_settings_channel.send(embed=embed, view=view)
        await inter.response.send_message("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", ephemeral=True)

    @commands.slash_command(description="[DEV] - workshopmsg")
    async def workshopmsg(self, inter: disnake.ApplicationCommandInteraction):
        if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
            await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
            return

        embed = disnake.Embed(
            title="üìù –§–æ—Ä–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è",
            description="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –≤–∞–∂–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã:",
            color=self.embed_color
        )
        embed.add_field(
            name="–£—Ä–æ–≤–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏",
            value="üì£ –ù–∏–∑–∫–∏–π - –º–µ–ª–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–µ —Å—Ä–æ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
                "‚ö†Ô∏è –°—Ä–µ–¥–Ω–∏–π - –≤–∞–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è\n"
                "üö® –í—ã—Å–æ–∫–∏–π - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —Å–∫–æ—Ä–µ–π—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è",
            inline=False
        )
        
        view = disnake.ui.View()
        view.add_item(disnake.ui.Button(emoji="üì£", style=disnake.ButtonStyle.gray, custom_id="low_priority"))
        view.add_item(disnake.ui.Button(emoji="‚ö†Ô∏è", style=disnake.ButtonStyle.gray, custom_id="medium_priority"))
        view.add_item(disnake.ui.Button(emoji="üö®", style=disnake.ButtonStyle.gray, custom_id="high_priority"))
        
        await inter.response.send_message(embed=embed, view=view)
        

    @commands.slash_command(description="[LIMITED-ROLES] –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã")
    async def fastcommands(self, inter):
        try:
            allowed_roles = {"—Å–ø–æ–Ω—Å–æ—Ä", "–º–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å–µ—Ä–≤–µ—Ä–æ–≤", "—é–º–∞–±–æ–π", "—é–º–∞–≥–µ—Ä–ª"}
            has_allowed_role = any(role.name.lower() in allowed_roles for role in inter.author.roles)
            if not (self.check_staff_permissions(inter, "staff") or 
                self.check_staff_permissions(inter, "dev") or 
                has_allowed_role):
                await inter.response.send_message(
                    "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", 
                    ephemeral=True
                )
                logger.info(f"[COMMANDS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /fastcommands, –Ω–æ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
                return
            self.db.cursor.execute("SELECT command_name, description FROM fast_commands")
            fast_commands = self.db.cursor.fetchall()
            embed = disnake.Embed(title="–î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã", color=self.embed_color)
            for command in fast_commands:
                embed.add_field(name=f".{command[0]}", value=command[1], inline=False)
                
            await inter.response.send_message(embed=embed)
            logger.info(f"[COMMANDS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /fastcommands")
            
        except Exception as e:
            await inter.response.send_message(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥", 
                ephemeral=True
            )
            logger.error(f"[COMMANDS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥: {e}")
            

    @commands.slash_command(description="[DEV] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ—Ö.—Ä–∞–±–æ—Ç")
    async def status(self, inter, value: int):
        try:
            if not self.check_staff_permissions(inter, "dev"):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                return
            if value not in [0, 1]:
                await inter.response.send_message("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 0 –∏–ª–∏ 1", ephemeral=True)
                return
            self.db.cursor.execute("SELECT * FROM settings WHERE guild_id = ?", (inter.guild.id,))
            existing_settings = self.db.cursor.fetchone()
            if existing_settings is not None:
                self.db.cursor.execute("UPDATE settings SET status = ? WHERE guild_id = ?", (value, inter.guild.id))
            else:
                self.db.cursor.execute("INSERT INTO settings (guild_id, status) VALUES (?, ?)", (inter.guild.id, value))
            self.db.conn.commit()
            if value == 0:
                await inter.response.send_message("–°—Ç–∞—Ç—É—Å —Ç–µ—Ö.—Ä–∞–±–æ—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ False.")
            elif value == 1:
                await inter.response.send_message("–°—Ç–∞—Ç—É—Å —Ç–µ—Ö.—Ä–∞–±–æ—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ True.")
        except Exception as e:
            await inter.followup.send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Ö.—Ä–∞–±–æ—Ç")


    @commands.slash_command(description="[STAFF] - –£–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    async def ticket_fix(self, inter, username: str):
        try:
            if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                logger.info(f"[COMMANDS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /ticket_fix, –Ω–æ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
                return
            self.db.cursor.execute("SELECT * FROM created_tickets WHERE creator_username = ?", (username,))
            existing_ticket = self.db.cursor.fetchone()
            if existing_ticket is None:
                await inter.response.send_message("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", ephemeral=True)
                logger.info(f"[COMMANDS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /ticket_fix, –Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            self.db.cursor.execute("DELETE FROM created_tickets WHERE creator_username = ?", (username,))
            self.db.conn.commit()
            await inter.response.send_message(f"–û–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", ephemeral=True)
            logger.info(f"[COMMANDS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /ticket_fix")
        except Exception as e:
            await inter.response.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è", ephemeral=True)
            logger.error(f"[COMMANDS] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")

    @commands.slash_command(description="[STAFF] - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ü–µ–Ω")
    async def price(self, inter):
        try:
            if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                logger.info(f"[COMMANDS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /price, –Ω–æ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
                return
            view = disnake.ui.View()
            select_menu = disnake.ui.Select(
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç",
                custom_id="price_select",
                options=[
                    disnake.SelectOption(label="–î–æ–∫—É–ø–∫–∞", value="–¥–æ–∫—É–ø–∫–∞"),
                    disnake.SelectOption(label="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏", value="–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏"),
                    disnake.SelectOption(label="–ê–≤—Ç–æ-–ø–æ–¥—Å—á–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞", value="–∞–≤—Ç–æ-–ø–æ–¥—Å—á–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞"),
                ]
            )
            select_menu.callback = self.price_callback
            view.add_item(select_menu)
            await inter.response.send_message("", view=view)
            logger.info(f"[COMMANDS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /price")
        except Exception as e:
            await inter.response.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ü–µ–Ω", ephemeral=True)
            logger.error(f"[COMMANDS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ü–µ–Ω: {e}")

    async def price_callback(self, inter):
        if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
            await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
            return
        if inter.data.values[0] == "–¥–æ–∫—É–ø–∫–∞":
            view = disnake.ui.View()
            select_menu = disnake.ui.Select(
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø",
                custom_id="type_select",
                options=[
                    disnake.SelectOption(label="–ê–¥–º–∏–Ω", value="admin"),
                    disnake.SelectOption(label="–í–∏–ø", value="vip"),
                    disnake.SelectOption(label="–ù–∞–∑–∞–¥", value="–Ω–∞–∑–∞–¥")
                ]
            )
            select_menu.callback = self.type_callback
            view.add_item(select_menu)
            await inter.response.edit_message(content="", view=view)
        elif inter.data.values[0] == "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏":
            embed = disnake.Embed(title="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏", color=self.embed_color)
            embed.add_field(name="–ü–µ—Ä–µ–Ω–æ—Å –∞–¥–º–∏–Ω/–≤–∏–ø –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏", value="150—Ä", inline=False)
            embed.add_field(name="–†–∞–∑–º—É—Ç –Ω–∞ —Å–∞–π—Ç–µ", value="200—Ä", inline=False)
            embed.add_field(name="–†–∞–∑–º–æ—Ä–æ–∑–∫–∞ –ø—Ä–∞–≤ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", value="350—Ä", inline=False)
            embed.add_field(name="–†–∞–∑–º–æ—Ä–æ–∑–∫–∞ –ø—Ä–∞–≤ –¥–ª—è —Å–ø–æ–Ω—Å–æ—Ä–∞", value="750—Ä", inline=False)
            await inter.response.edit_message(embed=embed)
        elif inter.data.values[0] == "–∞–≤—Ç–æ-–ø–æ–¥—Å—á–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞":
            if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                return
            modal = disnake.ui.Modal(
                title="–ê–≤—Ç–æ-–ø–æ–¥—Å—á–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞",
                custom_id="refund_modal",
                components=[
                    disnake.ui.ActionRow(
                        disnake.ui.TextInput(
                            label="–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –∞–¥–º–∏–Ω–∫–∏",
                            placeholder="1337",
                            custom_id="price_input",
                            style=disnake.TextInputStyle.short,
                        )
                    ),
                    disnake.ui.ActionRow(
                        disnake.ui.TextInput(
                            label="–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏ –∞–¥–º–∏–Ω–∫–∏ (–¥–¥.–º–º.–≥–≥–≥–≥)",
                            placeholder="12.09.2024",
                            custom_id="date_input",
                            style=disnake.TextInputStyle.short,
                        )
                    ),
                ],
            )

            await inter.response.send_modal(modal)

    async def type_callback(self, inter):
        if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
            await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
            return

        if inter.data.values[0] == "–Ω–∞–∑–∞–¥":
            view = disnake.ui.View()
            select_menu = disnake.ui.Select(
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç",
                custom_id="price_select",
                options=[
                    disnake.SelectOption(label="–î–æ–∫—É–ø–∫–∞", value="–¥–æ–∫—É–ø–∫–∞"),
                    disnake.SelectOption(label="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏", value="–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏"),
                    disnake.SelectOption(label="–ê–≤—Ç–æ-–ø–æ–¥—Å—á–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞", value="–∞–≤—Ç–æ-–ø–æ–¥—Å—á–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞"),
                ]
            )
            select_menu.callback = self.price_callback
            view.add_item(select_menu)
            await inter.response.edit_message(content="", view=view)
        elif inter.data.values[0] == "admin":
            view = disnake.ui.View()
            select_menu = disnake.ui.Select(
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å",
                custom_id="admin_level_select",
                options=[
                    disnake.SelectOption(label="1lvl", value="1lvl"),
                    disnake.SelectOption(label="2lvl", value="2lvl"),
                    disnake.SelectOption(label="–ù–∞–∑–∞–¥", value="–Ω–∞–∑–∞–¥")
                ]
            )
            select_menu.callback = self.admin_level_callback
            view.add_item(select_menu)
            await inter.response.edit_message(content="", view=view)
        elif inter.data.values[0] == "vip":
            view = disnake.ui.View()
            select_menu = disnake.ui.Select(
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å",
                custom_id="vip_level_select",
                options=[
                    disnake.SelectOption(label="Medium", value="medium"),
                    disnake.SelectOption(label="Platinum", value="platinum"),
                    disnake.SelectOption(label="Crystal", value="crystal"),
                    disnake.SelectOption(label="–ù–∞–∑–∞–¥", value="–Ω–∞–∑–∞–¥")
                ]
            )
            select_menu.callback = self.vip_level_callback
            view.add_item(select_menu)
            await inter.response.edit_message(content="", view=view)

    async def vip_level_callback(self, inter):
        if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
            await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
            return

        if inter.data.values[0] == "–Ω–∞–∑–∞–¥":
            view = disnake.ui.View()
            select_menu = disnake.ui.Select(
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø",
                custom_id="type_select",
                options=[
                    disnake.SelectOption(label="–ê–¥–º–∏–Ω", value="admin"),
                    disnake.SelectOption(label="–í–∏–ø", value="vip"),
                    disnake.SelectOption(label="–ù–∞–∑–∞–¥", value="–Ω–∞–∑–∞–¥")
                ]
            )
            select_menu.callback = self.type_callback
            view.add_item(select_menu)
            await inter.response.edit_message(content="", view=view)
        else:
            self.db.cursor.execute("SELECT vip_medium_price, vip_platinum_price, vip_crystal_price, vip_crystalplus_price FROM price_list")
            prices = self.db.cursor.fetchone()
            if prices is None:
                await inter.response.send_message("–¶–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", ephemeral=True)
                return
            vip_medium_price = prices[0]
            vip_platinum_price = prices[1]
            vip_crystal_price = prices[2]
            vip_crystalplus_price = prices[3]
            embed = disnake.Embed(title="–î–æ–∫—É–ø–∫–∞ –≤–∏–ø–∞", color=self.embed_color)
            if inter.data.values[0] == "medium":
                embed.add_field(name="–° Medium –Ω–∞ Platinum", value=f"{vip_platinum_price - vip_medium_price}—Ä", inline=False)
                embed.add_field(name="–° Medium –Ω–∞ Crystal", value=f"{vip_crystal_price - vip_medium_price}—Ä", inline=False)
                embed.add_field(name="–° Medium –Ω–∞ Crystal+", value=f"{vip_crystalplus_price - vip_medium_price}—Ä", inline=False)
            elif inter.data.values[0] == "platinum":
                embed.add_field(name="–° Platinum –Ω–∞ Crystal", value=f"{vip_crystal_price - vip_platinum_price}—Ä", inline=False)
                embed.add_field(name="–° Platinum –Ω–∞ Crystal+", value=f"{vip_crystalplus_price - vip_platinum_price}—Ä", inline=False)
            elif inter.data.values[0] == "crystal":
                embed.add_field(name="–° Crystal –Ω–∞ Crystal+", value=f"{vip_crystalplus_price - vip_crystal_price}—Ä", inline=False)
            await inter.response.edit_message(embed=embed)

    async def admin_level_callback(self, inter):
        if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
            await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
            return

        if inter.data.values[0] == "–Ω–∞–∑–∞–¥":
            view = disnake.ui.View()
            select_menu = disnake.ui.Select(
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø",
                custom_id="type_select",
                options=[
                    disnake.SelectOption(label="–ê–¥–º–∏–Ω", value="admin"),
                    disnake.SelectOption(label="–í–∏–ø", value="vip"),
                    disnake.SelectOption(label="–ù–∞–∑–∞–¥", value="–Ω–∞–∑–∞–¥")
                ]
            )
            select_menu.callback = self.type_callback
            view.add_item(select_menu)
            await inter.response.edit_message(content="", view=view)
        else:
            self.db.cursor.execute("SELECT admin_1lvl_price, admin_2lvl_price, sponsor_price FROM price_list")
            prices = self.db.cursor.fetchone()
            if prices is None:
                await inter.response.send_message("–¶–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", ephemeral=True)
                return
            admin_1lvl_price = prices[0]
            admin_2lvl_price = prices[1]
            sponsor_price = prices[2]
            embed = disnake.Embed(title="–î–æ–∫—É–ø–∫–∞ –∞–¥–º–∏–Ω–∫–∏", color=self.embed_color)
            if inter.data.values[0] == "1lvl":
                price_diff_2lvl = admin_2lvl_price - admin_1lvl_price
                price_diff_sponsor = sponsor_price - admin_1lvl_price
                embed.add_field(name="–° 1lvl –Ω–∞ 2lvl", value=f"{price_diff_2lvl}—Ä", inline=False)
                embed.add_field(name="–° 1lvl –Ω–∞ Sponsor", value=f"{price_diff_sponsor}—Ä", inline=False)
            elif inter.data.values[0] == "2lvl":
                price_diff_sponsor = sponsor_price - admin_2lvl_price
                embed.add_field(name="–° 2lvl –Ω–∞ Sponsor", value=f"{price_diff_sponsor}—Ä", inline=False)
            await inter.response.edit_message(embed=embed)
    

    @commands.slash_command(description="[DEV] - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–∞—Ç–µ")
    async def date_stats(self, inter):
        try:
            if not self.check_staff_permissions(inter, "dev"):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                logger.info(f"[COMMANDS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /date_stats, –Ω–æ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
                return

            modal = disnake.ui.Modal(
                title="–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
                custom_id="date_stats_modal",
                components=[
                    disnake.ui.TextInput(
                        label="–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–î–î.–ú–ú.–ì–ì–ì–ì)",
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 23.05.2025",
                        custom_id="date_input",
                        style=disnake.TextInputStyle.short,
                        max_length=10
                    )
                ]
            )
            await inter.response.send_modal(modal)
            
        except Exception as e:
            await inter.response.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞", ephemeral=True)
            logger.error(f"[COMMANDS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: {e}")

    @commands.slash_command(description="[DEV] - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    async def stats(self, inter):
        try:
            if not self.check_staff_permissions(inter, "dev"):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                logger.info(f"[COMMANDS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /stats, –Ω–æ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
                return
            self.page = 1
            self.db.cursor.execute("SELECT * FROM staff_list")
            staff_members = self.db.cursor.fetchall()
            staff_members.sort(key=lambda x: x[5], reverse=True)
            embed = disnake.Embed(
                title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                description=f"–û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {self.page} –∏–∑ {len(staff_members) // 5 + 1}",
                color=self.embed_color
            )
            start = (self.page - 1) * 5
            end = self.page * 5
            for i, staff_member in enumerate(staff_members[start:end], start=1):
                username = staff_member[1]
                role = staff_member[4]
                embed.add_field(
                    name=f"{i}. {username}",
                    value=f"ü™™ –†–æ–ª—å: {role}\nüé´ –ó–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: **–°–µ–∫—Ä–µ—Ç**",
                    inline=False
                )
            view = disnake.ui.View()
            left_button = disnake.ui.Button(label="‚¨ÖÔ∏è", custom_id="left", style=disnake.ButtonStyle.gray)
            right_button = disnake.ui.Button(label="‚û°Ô∏è", custom_id="right", style=disnake.ButtonStyle.gray)
            secret_button = disnake.ui.Button(label="–û—Ç–∫—Ä—ã—Ç—å —Å–µ–∫—Ä–µ—Ç", custom_id="secret", style=disnake.ButtonStyle.red)
            view.add_item(left_button)
            view.add_item(right_button)
            view.add_item(secret_button)
            self.stats_message = await inter.response.send_message(embed=embed, view=view)
            logger.info(f"[COMMANDS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /stats")
        except Exception as e:
            await inter.response.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", ephemeral=True)
            logger.error(f"[COMMANDS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {e}")

    @commands.Cog.listener()
    async def on_button_click(self, inter):
        if inter.data.custom_id.startswith("workshop_approve_"):
            await inter.message.delete()
            await inter.response.send_message(
                f"–û–±—Ä–∞—â–µ–Ω–∏–µ - –ø—Ä–∏–Ω—è—Ç–æ, —É–¥–∞–ª–∏–ª",
                ephemeral=True
            )
        if inter.data.custom_id.startswith("workshop_reject_"):
            await inter.message.delete()
            await inter.response.send_message(
                f"–û–±—Ä–∞—â–µ–Ω–∏–µ - —Ö—É–π–Ω—è, —É–¥–∞–ª–∏–ª",
                ephemeral=True
            )

        if inter.data.custom_id in ["low_priority", "medium_priority", "high_priority"]:
            priority_level = inter.data.custom_id.split("_")[0]
            
            modal = disnake.ui.Modal(
                title=f"–û–±—Ä–∞—â–µ–Ω–∏–µ ({priority_level} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)",
                custom_id=f"workshop_modal_{priority_level}",
                components=[
                    disnake.ui.TextInput(
                        label="–¢–µ–º–∞ –ø—Ä–æ–±–ª–µ–º—ã",
                        placeholder="–ö –ø—Ä–∏–º–µ—Ä—É: –º–∞—Ä–∫–µ—Ç —Å–∫–∏–Ω–æ–≤",
                        custom_id="problem_title",
                        style=disnake.TextInputStyle.short,
                        max_length=100,
                        required=True
                    ),
                    disnake.ui.TextInput(
                        label="–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã",
                        placeholder="–ö –ø—Ä–∏–º–µ—Ä—É: –æ—à–∏–±–∫–∞ - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –Ω—É–∂–µ–Ω –¥–æ–¥–µ–ø",
                        custom_id="problem_description",
                        style=disnake.TextInputStyle.paragraph,
                        max_length=2000,
                        required=True
                    ),
                    disnake.ui.TextInput(
                        label="–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
                        placeholder="https://example.com/image.png",
                        custom_id="image_url",
                        style=disnake.TextInputStyle.long,
                        required=False
                    )
                ]
            )
            await inter.response.send_modal(modal)

        if inter.data.custom_id == "manage_roles":
            if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
                await inter.response.send_message("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", ephemeral=True)
                return
            
            modal = disnake.ui.Modal(
                title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏",
                custom_id="role_management_modal",
                components=[
                    disnake.ui.TextInput(
                        label="–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º —É—á–∞—Å—Ç–Ω–∏–∫–∞",
                        placeholder="–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º (e.g anarchowitz)",
                        custom_id="target_username",
                        style=disnake.TextInputStyle.short,
                        max_length=32
                    )
                ]
            )
            await inter.response.send_modal(modal)
        if inter.data.custom_id == "update_staff_settings":
            if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                return
            self.db.cursor.execute("SELECT * FROM created_tickets")
            all_tickets = self.db.cursor.fetchall()
            self.db.cursor.execute("SELECT * FROM created_tickets WHERE taken_username IS NULL")
            free_tickets = self.db.cursor.fetchall()

            embed = disnake.Embed(
                title="–ü–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ç–∏–∫–µ—Ç–∞–º",
                description=f"–ê–∫—Ç–∏–≤–Ω—ã–µ: **{len(all_tickets)}**\n–°–≤–æ–±–æ–¥–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã: **{len(free_tickets)}**\n\n"
                            f"üîÑ - –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Ç–∏–∫–µ—Ç–∞–º\n"
                            f"üîî - –ü–∏–Ω–≥ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞\n"
                            f"üìù - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —Ç–∏–∫–µ—Ç–∞\n"
                            f"üìä - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã\n\n"
                            f"‚ö†Ô∏è - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ—Ä–º–µ\n"
                            f"üë• - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                color=self.embed_color
            )
            await inter.message.edit(embed=embed)
            await inter.response.defer()
        elif inter.data.custom_id == "ping":
            self.db.cursor.execute("SELECT mention FROM staff_list WHERE username = ?", (inter.author.name,))
            mention = self.db.cursor.fetchone()
            if mention is not None:
                mention = mention[0]
                if mention == 0:
                    self.db.cursor.execute("UPDATE staff_list SET mention = 1 WHERE username = ?", (inter.author.name,))
                else:
                    self.db.cursor.execute("UPDATE staff_list SET mention = 0 WHERE username = ?", (inter.author.name,))
                self.db.conn.commit()
                await inter.response.send_message(f"–ü–∏–Ω–≥ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞ –≤–∫–ª—é—á–µ–Ω –¥–ª—è {inter.author.mention}" if mention == 0 else f"–ü–∏–Ω–≥ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω –¥–ª—è {inter.author.mention}", ephemeral=True)
        elif inter.data.custom_id == "ticket_name":
            if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                return
            modal = disnake.ui.Modal(
                title="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫ —Ç–∏–∫–µ—Ç–∞",
                custom_id="ticket_name_modal",
                components=[
                    disnake.ui.ActionRow(
                        disnake.ui.TextInput(
                            label="–ù–æ–≤—ã–π –Ω–∏–∫ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —Ç–∏–∫–µ—Ç–∞",
                            placeholder="–ö –ø—Ä–∏–º–µ—Ä—É: anarcho",
                            custom_id="ticket_name_input",
                            style=disnake.TextInputStyle.short,
                        )
                    ),
                ],
            )
            await inter.response.send_modal(modal)
            self.bot.add_modal_handler(self.ticket_name_modal_callback)
        elif inter.data.custom_id == "ping":
            self.db.cursor.execute("SELECT mention FROM staff_list WHERE username = ?", (inter.author.name,))
            mention = self.db.cursor.fetchone()
            if mention is not None:
                mention = mention[0]
                if mention == 0:
                    self.db.cursor.execute("UPDATE staff_list SET mention = 1 WHERE username = ?", (inter.author.name,))
                else:
                    self.db.cursor.execute("UPDATE staff_list SET mention = 0 WHERE username = ?", (inter.author.name,))
                self.db.conn.commit()
                await inter.response.send_message(f"–ü–∏–Ω–≥ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞ –≤–∫–ª—é—á–µ–Ω –¥–ª—è {inter.author.mention}" if mention == 0 else f"–ü–∏–Ω–≥ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞ –≤—ã–∫–ª—é—á–µ–Ω –¥–ª—è {inter.author.mention}", ephemeral=True)
        elif inter.data.custom_id == "daily_quota":
            self.db.cursor.execute("SELECT daily_quota FROM staff_list WHERE username = ?", (inter.author.name,))
            daily_quota = self.db.cursor.fetchone()
            if daily_quota is not None:
                daily_quota = daily_quota[0]
                if daily_quota == 0:
                    self.db.cursor.execute("UPDATE staff_list SET daily_quota = 1 WHERE username = ?", (inter.author.name,))
                else:
                    self.db.cursor.execute("UPDATE staff_list SET daily_quota = 0 WHERE username = ?", (inter.author.name,))
                self.db.conn.commit()
                await inter.response.send_message(f"–ü–∏–Ω–≥ –≤ 18:00 (MSK) –ø—Ä–∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∏–∏ –Ω–æ—Ä–º—ã –≤–∫–ª—é—á–µ–Ω –¥–ª—è {inter.author.mention}" if daily_quota == 0 else f"–ü–∏–Ω–≥ –≤ 18:00 (MSK) –ø—Ä–∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∏–∏ –Ω–æ—Ä–º—ã –≤—ã–∫–ª—é—á–µ–Ω –¥–ª—è {inter.author.mention}", ephemeral=True)

        elif inter.data.custom_id == "active_tickets":
            if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                return
            self.db.cursor.execute("SELECT thread_id FROM created_tickets WHERE taken_username = ?", (inter.author.name,))
            active_tickets = self.db.cursor.fetchall()
            if active_tickets:
                embed = disnake.Embed(
                    title="–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã",
                    description="–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –≤–∑—è–ª–∏:",
                    color=self.embed_color
                )
                for ticket in active_tickets:
                    embed.add_field(name=f"–¢–∏–∫–µ—Ç", value=f"<#{ticket[0]}>", inline=False)
                await inter.response.send_message(embed=embed, ephemeral=True)
            else:
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤", ephemeral=True)

        if inter.data.custom_id == "left":
            if not self.check_staff_permissions(inter, "dev"):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                return
            if self.page > 1:
                self.page -= 1
                self.db.cursor.execute("SELECT * FROM staff_list")
                staff_members = self.db.cursor.fetchall()
                staff_members.sort(key=lambda x: x[5], reverse=True)

                embed = disnake.Embed(
                    title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                    description=f"–û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {self.page} –∏–∑ {len(staff_members) // 5 + 1}",
                    color=self.embed_color
                )

                start = (self.page - 1) * 5
                end = self.page * 5

                for i, staff_member in enumerate(staff_members[start:end], start=1):
                    username = staff_member[1]
                    role = staff_member[4]
                    closed_tickets = staff_member[5]

                    embed.add_field(
                        name=f"{(self.page - 1) * 5 + i}. {username}",
                        value=f"ü™™ –†–æ–ª—å: {role}\nüé´ –ó–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: **–°–µ–∫—Ä–µ—Ç**",
                        inline=False
                    )

                await inter.message.edit(embed=embed)
                await inter.response.defer()

        elif inter.data.custom_id == "right":
            if not self.check_staff_permissions(inter, "dev"):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                return
            self.page += 1
            self.db.cursor.execute("SELECT * FROM staff_list")
            staff_members = self.db.cursor.fetchall()
            staff_members.sort(key=lambda x: x[5], reverse=True)

            embed = disnake.Embed(
                title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                description=f"–û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {self.page} –∏–∑ {len(staff_members) // 5 + 1}",
                color=self.embed_color
            )

            start = (self.page - 1) * 5
            end = self.page * 5

            for i, staff_member in enumerate(staff_members[start:end], start=1):
                username = staff_member[1]
                role = staff_member[4]
                closed_tickets = staff_member[5]

                embed.add_field(
                    name=f"{(self.page - 1) * 5 + i}. {username}",
                    value=f"ü™™ –†–æ–ª—å: {role}\nüé´ –ó–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: **–°–µ–∫—Ä–µ—Ç**",
                    inline=False
                )

            await inter.message.edit(embed=embed)
            await inter.response.defer()

        elif inter.data.custom_id == "secret":
            if not self.check_staff_permissions(inter, "dev"):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                return
            self.db.cursor.execute("SELECT * FROM staff_list")
            staff_members = self.db.cursor.fetchall()
            staff_members.sort(key=lambda x: x[5], reverse=True)

            embed = disnake.Embed(
                title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                description=f"–û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {self.page} –∏–∑ {len(staff_members) // 5 + 1}",
                color=self.embed_color
            )

            start = (self.page - 1) * 5
            end = self.page * 5

            for i, staff_member in enumerate(staff_members[start:end], start=1):
                username = staff_member[1]
                role = staff_member[4]
                closed_tickets = staff_member[5]

                embed.add_field(
                    name=f"{(self.page - 1) * 5 + i}. {username}",
                    value=f"ü™™ –†–æ–ª—å: {role}\nüé´ –ó–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: {closed_tickets}",
                    inline=False
                )

            if self.stats_message is not None:
                await self.stats_message.edit(embed=embed)
            else:
                await inter.message.edit(embed=embed)
            await inter.response.defer()



    @commands.slash_command(description="[DEV] - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞")
    async def settings(self, inter):
        if not self.check_staff_permissions(inter, "dev"):
            await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
            return
        if inter.guild is None:
            await inter.response.send_message("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", ephemeral=True)
            return
        modal = disnake.ui.Modal(
            title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            custom_id="settings_modal",
            components=[
                disnake.ui.ActionRow(
                    disnake.ui.TextInput(
                        label="–¶–≤–µ—Ç –±–æ–∫–æ–≤–æ–π –ø–æ–ª–æ—Å–∫–∏ (–í HEX)",
                        placeholder="#7789fd",
                        custom_id="color",
                        style=disnake.TextInputStyle.short,
                    )
                ),
                disnake.ui.ActionRow(
                    disnake.ui.TextInput(
                        label="–ê–π–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤",
                        placeholder="1234567890",
                        custom_id="category_id",
                        style=disnake.TextInputStyle.short,
                    )
                ),
                disnake.ui.ActionRow(
                    disnake.ui.TextInput(
                        label="–ê–π–¥–∏ –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤",
                        placeholder="1234567890",
                        custom_id="dev_channel_id",
                        style=disnake.TextInputStyle.short,
                    )
                ),
                disnake.ui.ActionRow(
                    disnake.ui.TextInput(
                        label="–ê–π–¥–∏ –∫–∞–Ω–∞–ª–∞ —Ç–∏–∫–µ—Ç–æ–≤",
                        placeholder="1234567890",
                        custom_id="channel_id",
                        style=disnake.TextInputStyle.short,
                    )
                ),
                disnake.ui.ActionRow(
                    disnake.ui.TextInput(
                        label="–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è",
                        placeholder="10:00 - 20:00",
                        custom_id="primetime",
                        style=disnake.TextInputStyle.short,
                    )
                ),
            ],
        )

        await inter.response.send_modal(modal)

    @commands.Cog.listener()
    async def on_modal_submit(self, inter: disnake.ModalInteraction):
        if inter.data.custom_id == "refund_modal":
            try:
                price = int(inter.text_values['price_input'])
                date_str = inter.text_values['date_input']
                
                try:
                    purchase_date = datetime.datetime.strptime(date_str, "%d.%m.%Y").date()
                except ValueError:
                    await inter.response.send_message("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì", ephemeral=True)
                    return
                current_date = datetime.date.today()
                days_used = (current_date - purchase_date).days
                if days_used < 0:
                    await inter.response.send_message("‚ö† –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º!", ephemeral=True)
                    return
                guaranteed_deduction = price / 3 
                
                daily_deduction_rate = 100 / 30  # 3.33 —Ä—É–± –≤ –¥–µ–Ω—å
                time_deduction = daily_deduction_rate * days_used
                refund = max(0, (price - guaranteed_deduction) - time_deduction)

                await inter.response.edit_message(
                    f"üí∏ **–ê–≤—Ç–æ-–ø–æ–¥—Å—á–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞**:\n"
                    f"–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: `{price}‚ÇΩ`\n"
                    f"–í—ã—á–µ—Ç –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `{int(time_deduction)}‚ÇΩ`\n\n"
                    f"–ò—Ç–æ–≥–æ –∫ –≤–æ–∑–≤—Ä–∞—Ç—É: `{int(refund)}‚ÇΩ`",
                    view=None
                )
                
            except ValueError:
                await inter.response.send_message("‚ö† –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö! –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ü–µ–Ω–∞ - —á–∏—Å–ª–æ, –∞ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì", ephemeral=True)

        if inter.data.custom_id.startswith("workshop_modal_"):
            priority_level = inter.data.custom_id.split("_")[2]
            priority_colors = {
                "low": disnake.Colour.blue(),
                "medium": disnake.Colour.gold(),
                "high": disnake.Colour.red()
            }
            
            title = inter.text_values["problem_title"]
            description = inter.text_values["problem_description"]
            image_url = inter.text_values.get("image_url", "").strip()
            
            embed = disnake.Embed(
                title=f"–¢–µ–º–∞: {title}",
                description=description,
                color=priority_colors[priority_level]
            )
            embed.set_author(name=f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority_level.capitalize()}")
            embed.set_footer(text=f"–û—Ç–ø—Ä–∞–≤–∏–ª: {inter.author.display_name}")
            
            view = disnake.ui.View()
            view.add_item(disnake.ui.Button(emoji="‚úÖ", custom_id=f"workshop_approve_{inter.author.id}", style=disnake.ButtonStyle.gray))
            view.add_item(disnake.ui.Button(emoji="üí©", custom_id=f"workshop_reject_{inter.author.id}", style=disnake.ButtonStyle.gray))
            
            if priority_level == "high":
                high_priority_user_id = 296675294092197889
                try:
                    user = await self.bot.fetch_user(high_priority_user_id)
                    dm_channel = await user.create_dm()
                    
                    if image_url:
                        await dm_channel.send(
                            content=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}",
                            embed=embed,
                            view=view
                        )
                    else:
                        await dm_channel.send(
                            embed=embed,
                            view=view
                        )
                        
                    await inter.response.send_message(
                        "–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!",
                        ephemeral=True
                    )
                except Exception as e:
                    await inter.response.send_message(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        ephemeral=True
                    )
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ high priority —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            else:
                if image_url:
                    await inter.channel.send(
                        content=f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}",
                        embed=embed,
                        view=view
                    )
                else:
                    await inter.channel.send(
                        embed=embed,
                        view=view
                    )
                    
                await inter.response.send_message(
                    "–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
                    ephemeral=True
                )
                
        if inter.data.custom_id == "role_management_modal":
            if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
                await inter.response.send_message("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", ephemeral=True)
                return
                
            target_username = inter.text_values["target_username"].strip()
            member = None
            for guild_member in inter.guild.members:
                if guild_member.name.lower() == target_username.lower():
                    member = guild_member
                    break
            
            if not member:
                await inter.response.send_message(
                    f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–∏–∫–æ–º '{target_username}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ",
                    ephemeral=True
                )
                return
                
            roles = [
                role for role in member.roles 
                if role != inter.guild.default_role and not self.is_protected_role(role)
            ]
            
            if not roles:
                await inter.response.send_message(
                    f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_username} –Ω–µ—Ç —Ä–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å",
                    ephemeral=True
                )
                return
                
            view = disnake.ui.View()
            select_menu = disnake.ui.Select(
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                custom_id=f"remove_role_{member.id}"
            )
            
            for role in roles:
                select_menu.add_option(
                    label=role.name,
                    value=str(role.id),
                    description=f"–£–¥–∞–ª–∏—Ç—å —Ä–æ–ª—å {role.name}"
                )
                
            view.add_item(select_menu)
            select_menu.callback = self.remove_role_callback
            
            await inter.response.send_message(
                f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.mention}",
                view=view,
                ephemeral=True
            )
        if inter.data.custom_id == "date_stats_modal":
            try:
                date = inter.text_values['date_input']
                try:
                    day, month, year = map(int, date.split('.'))
                    datetime.datetime.strptime(date, "%d.%m.%Y")
                except ValueError:
                    await inter.response.send_message("‚ö† –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä 23.05.2025)", ephemeral=True)
                    return
                self.db.cursor.execute("""
                    SELECT username, closed_tickets 
                    FROM date_stats 
                    WHERE date = ?
                    ORDER BY closed_tickets DESC
                """, (date,))
                
                stats = self.db.cursor.fetchall()
                if not stats:
                    await inter.response.send_message(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {date} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", ephemeral=True)
                    return
                embed = disnake.Embed(
                    title=f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {date}",
                    color=self.embed_color
                )
                total_closed = 0
                for username, closed_tickets in stats:
                    embed.add_field(
                        name=f"üë§ {username}",
                        value=f"–ó–∞–∫—Ä—ã—Ç–æ —Ç–∏–∫–µ—Ç–æ–≤: {closed_tickets}",
                        inline=False
                    )
                    total_closed += closed_tickets
                
                embed.set_footer(text=f"–í—Å–µ–≥–æ –∑–∞–∫—Ä—ã—Ç–æ —Ç–∏–∫–µ—Ç–æ–≤: {total_closed}")
                
                await inter.response.send_message(embed=embed)
                
            except Exception as e:
                await inter.response.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", ephemeral=True)
                logger.error(f"[COMMANDS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        if inter.data.custom_id == "ticket_name_modal":
            if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                return
            new_ticket_name = inter.text_values['ticket_name_input']
            self.db.cursor.execute("UPDATE staff_list SET ticket_name = ? WHERE username = ?", (new_ticket_name, inter.author.name))
            self.db.conn.commit()
            await inter.response.send_message(f"–ù–∏–∫ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —Ç–∏–∫–µ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_ticket_name}", ephemeral=True)

        if inter.data.custom_id == "settings_modal":
            color = inter.text_values['color']
            category_id = int(inter.text_values['category_id'])
            channel_id = int(inter.text_values['channel_id'])
            primetime = str(inter.text_values['primetime'])

            category = inter.guild.get_channel(category_id)
            channel = inter.guild.get_channel(channel_id)

            if category is None:
                await inter.response.send_message("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º ID –≤–≤–µ–¥—ë–Ω–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!")
                return

            if channel is None:
                await inter.response.send_message("–ö–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º ID –≤–≤–µ–¥—ë–Ω–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!")
                return

            self.db.cursor.execute(""" 
                SELECT * FROM settings WHERE guild_id = ?
            """, (inter.guild.id,))
            existing_settings = self.db.cursor.fetchone()

            if existing_settings is not None:
                self.db.cursor.execute(""" 
                    UPDATE settings SET embed_color = ?, category_id = ?, ticket_channel_id = ?, primetime = ?, logging = ?
                    WHERE guild_id = ?
                """, (color, category_id, channel_id, primetime, inter.guild.id))
            else:
                self.db.cursor.execute(""" 
                    INSERT INTO settings (guild_id, embed_color, category_id, ticket_channel_id, primetime, logging)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, (inter.guild.id, color, category_id, channel_id, primetime))

            self.db.conn.commit()

            await inter.response.send_message(
                embed=disnake.Embed(title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", description=f"–¶–≤–µ—Ç –±–æ–∫–æ–≤–æ–π –ø–æ–ª–æ—Å–∫–∏: {color}\n"
                f"–ê–π–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤: {category_id}\n"
                f"–ê–π–¥–∏ –∫–∞–Ω–∞–ª–∞ —Ç–∏–∫–µ—Ç–æ–≤: {channel_id}\n"
                f"–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: {primetime}\n",
                color=self.embed_color),
                ephemeral=True
            )
    async def remove_role_callback(self, inter: disnake.MessageInteraction):
        if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
            await inter.response.send_message("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", ephemeral=True)
            return
            
        custom_id_parts = inter.data.custom_id.split("_")
        if len(custom_id_parts) != 3:
            await inter.response.send_message("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", ephemeral=True)
            return
            
        target_user_id = int(custom_id_parts[2])
        role_id = int(inter.data.values[0])
        
        member = inter.guild.get_member(target_user_id)
        role = inter.guild.get_role(role_id)
        
        if not member or not role:
            await inter.response.send_message("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", ephemeral=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–æ–ª—å –∑–∞—â–∏—â–µ–Ω–Ω–æ–π
        if self.is_protected_role(role):
            await inter.response.send_message(
                f"‚ùå –†–æ–ª—å {role.name} –∑–∞—â–∏—â–µ–Ω–∞ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞!",
                ephemeral=True
            )
            return
            
        try:
            await member.remove_roles(role)
            await inter.response.send_message(
                f"‚úÖ –†–æ–ª—å {role.name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.mention}",
                ephemeral=True
            )
            logger.info(f"[ROLE] {inter.author} —É–¥–∞–ª–∏–ª —Ä–æ–ª—å {role.name} —É {member}")
        except Exception as e:
            await inter.response.send_message(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏: {str(e)}",
                ephemeral=True
            )

def setupcommands(bot):
    bot.add_cog(Settings(bot))