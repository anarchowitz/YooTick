import disnake, datetime, logging, random, asyncio
from math import ceil
from disnake.ext import commands
from database import Database

logger = logging.getLogger('bot')
logger.setLevel(logging.INFO)

class Settings(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = Database("database.db")
        self.page = 1
        self.stats_message = None
        self.embed_color = disnake.Colour.from_rgb(119, 137, 253)

    @staticmethod
    def check_staff_permissions(inter, required_role):
        db = Database("database.db")
        db.cursor.execute("SELECT * FROM staff_list WHERE username = ? AND user_id = ?", (inter.author.name, inter.author.id))
        staff_member = db.cursor.fetchone()
        
        if staff_member is None:
            return False
        if staff_member[4] != required_role:
            return False
        
        return True

    @commands.slash_command(description="–ü–æ–º–æ—â–Ω–∏–∫ –≤ –≤—ã–±–æ—Ä–µ. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /choicehelper <–≤–∞—Ä–∏–∞–Ω—Ç1> <–≤–∞—Ä–∏–∞–Ω—Ç2>.. - –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
    async def choicehelper(self, inter, *, options: str):
        try:
            options_list = options.split()
            if len(options_list) < 2:
                await inter.response.send_message("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞", ephemeral=True)
                return
            
            animation = [
                "üé≤ –í—ã–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç...\n",
                "üîÑ –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–µ—Ä–µ–º–µ—à–∏–≤–∞—é—Ç—Å—è...\n",
                "üòà –ü–æ–¥–∫—Ä—É—á–∏–≤–∞–µ–º —Å–∞–º—ã–π —É–∂–∞—Å–Ω—ã–π –∏—Å—Ö–æ–¥ –¥–ª—è –≤–∞—Å!\n",
                "üéâ –í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω!\n",
            ]
            
            await inter.response.send_message(animation[0])
            message = await inter.original_response()
            for i in range(1, len(animation)):
                await asyncio.sleep(0.65)
                await message.edit(content=animation[i])
            
            chosen_option = random.choice(options_list)
            chance = 100 / len(options_list)
            await message.edit(content=f"üéâ –í—ã–±—Ä–∞–Ω–æ: **{chosen_option}** üéä\n–®–∞–Ω—Å –≤—ã–ø–∞–¥–µ–Ω–∏—è: **{chance}%**")
        except Exception as e:
            await inter.followup.send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞", ephemeral=True)
            logger.error(f"[COMMANDS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞: {e}")

    @commands.slash_command(description="–ü–æ–∫–∞–∑–∞—Ç—å –ø–∏–Ω–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç–∞")
    async def ping(self, inter):
        try:
            await inter.response.send_message(f"–ü–∏–Ω–≥: {self.bot.latency * 1000:.2f}ms", ephemeral=True)
            logger.info(f"[COMMANDS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /ping")
        except Exception as e:
            await inter.response.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏–Ω–≥–∞", ephemeral=True)
            logger.error(f"[COMMANDS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏–Ω–≥–∞: {e}")

    @commands.slash_command(description="[STAFF] - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã")
    async def fastcommands(self, inter):
        try:
            if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                logger.info(f"[COMMANDS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /fastcommands, –Ω–æ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
                return
            self.db.cursor.execute("SELECT command_name, description FROM fast_commands")
            fast_commands = self.db.cursor.fetchall()
            embed = disnake.Embed(title="–î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã", color=self.embed_color)
            for command in fast_commands:
                embed.add_field(name=f".{command[0]}", value=command[1], inline=False)
            await inter.response.send_message(embed=embed)
            logger.info(f"[COMMANDS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /fastcommands")
        except Exception as e:
            await inter.response.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥", ephemeral=True)
            logger.error(f"[COMMANDS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–º–∞–Ω–¥: {e}")

    @commands.slash_command(description="[DEV] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ç–µ—Ö.—Ä–∞–±–æ—Ç")
    async def status(self, inter, value: int):
        try:
            if not self.check_staff_permissions(inter, "dev"):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                return
            if value not in [0, 1]:
                await inter.response.send_message("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 0 –∏–ª–∏ 1", ephemeral=True)
                return
            self.db.cursor.execute("SELECT * FROM settings WHERE guild_id = ?", (inter.guild.id,))
            existing_settings = self.db.cursor.fetchone()
            if existing_settings is not None:
                self.db.cursor.execute("UPDATE settings SET status = ? WHERE guild_id = ?", (value, inter.guild.id))
            else:
                self.db.cursor.execute("INSERT INTO settings (guild_id, status) VALUES (?, ?)", (inter.guild.id, value))
            self.db.conn.commit()
            if value == 0:
                await inter.response.send_message("–¢–µ—Ö.—Ä–∞–±–æ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –î–æ—Å—Ç—É–ø –∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º —Ä–∞–∑—Ä–µ—à–µ–Ω.")
            elif value == 1:
                await inter.response.send_message("–¢–µ—Ö.—Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è. –î–æ—Å—Ç—É–ø –∫ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –¥–µ–π—Å—Ç–≤–∏—è–º –∑–∞–ø—Ä–µ—â–µ–Ω.")
        except Exception as e:
            await inter.followup.send("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Ö.—Ä–∞–±–æ—Ç")


    @commands.slash_command(description="[STAFF] - –£–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    async def ticket_fix(self, inter, username: str):
        try:
            if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                logger.info(f"[COMMANDS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /ticket_fix, –Ω–æ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
                return
            self.db.cursor.execute("SELECT * FROM created_tickets WHERE creator_username = ?", (username,))
            existing_ticket = self.db.cursor.fetchone()
            if existing_ticket is None:
                await inter.response.send_message("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", ephemeral=True)
                logger.info(f"[COMMANDS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /ticket_fix, –Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            self.db.cursor.execute("DELETE FROM created_tickets WHERE creator_username = ?", (username,))
            self.db.conn.commit()
            await inter.response.send_message(f"–û–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", ephemeral=True)
            logger.info(f"[COMMANDS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /ticket_fix")
        except Exception as e:
            await inter.response.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è", ephemeral=True)
            logger.error(f"[COMMANDS] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")

    @commands.slash_command(description="[STAFF] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ-–ø–∏–Ω–≥ –≤ —Ç–∏–∫–µ—Ç–µ")
    async def ticket_ping(self, inter, value: int):
        try:
            if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                logger.info(f"[COMMANDS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /ticket_ping, –Ω–æ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
                return
            if value not in [0, 1]:
                await inter.response.send_message("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å 0 –∏–ª–∏ 1", ephemeral=True)
                logger.info(f"[COMMANDS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /ticket_ping —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º")
                return
            self.db.cursor.execute("SELECT * FROM staff_list WHERE username = ?", (inter.author.name,))
            staff_member = self.db.cursor.fetchone()
            if staff_member is None:
                await inter.response.send_message("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!", ephemeral=True)
                logger.info(f"[COMMANDS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /ticket_ping, –Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            self.db.cursor.execute("UPDATE staff_list SET mention = ? WHERE username = ?", (value, inter.author.name))
            self.db.conn.commit()
            await inter.response.send_message(f"–ê–≤—Ç–æ-–ø–∏–Ω–≥ –≤ —Ç–∏–∫–µ—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {value}", ephemeral=True)
            logger.info(f"[COMMANDS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /ticket_ping")
        except Exception as e:
            await inter.response.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–≤—Ç–æ-–ø–∏–Ω–≥–∞", ephemeral=True)
            logger.error(f"[COMMANDS] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∞–≤—Ç–æ-–ø–∏–Ω–≥–∞: {e}")

    @commands.slash_command(description="[STAFF] - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ü–µ–Ω")
    async def price(self, inter):
        try:
            if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                logger.info(f"[COMMANDS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /price, –Ω–æ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
                return
            view = disnake.ui.View()
            select_menu = disnake.ui.Select(
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç",
                custom_id="price_select",
                options=[
                    disnake.SelectOption(label="–î–æ–∫—É–ø–∫–∞", value="–¥–æ–∫—É–ø–∫–∞"),
                    disnake.SelectOption(label="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏", value="–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏"),
                    disnake.SelectOption(label="–ê–≤—Ç–æ-–ø–æ–¥—Å—á–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞", value="–∞–≤—Ç–æ-–ø–æ–¥—Å—á–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞"),
                ]
            )
            select_menu.callback = self.price_callback
            view.add_item(select_menu)
            await inter.response.send_message("", view=view)
            logger.info(f"[COMMANDS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /price")
        except Exception as e:
            await inter.response.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ü–µ–Ω", ephemeral=True)
            logger.error(f"[COMMANDS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ü–µ–Ω: {e}")

    async def price_callback(self, inter):
        if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
            await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
            return
        if inter.data.values[0] == "–¥–æ–∫—É–ø–∫–∞":
            view = disnake.ui.View()
            select_menu = disnake.ui.Select(
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø",
                custom_id="type_select",
                options=[
                    disnake.SelectOption(label="–ê–¥–º–∏–Ω", value="admin"),
                    disnake.SelectOption(label="–í–∏–ø", value="vip"),
                    disnake.SelectOption(label="–ù–∞–∑–∞–¥", value="–Ω–∞–∑–∞–¥")
                ]
            )
            select_menu.callback = self.type_callback
            view.add_item(select_menu)
            await inter.response.edit_message(content="", view=view)
        elif inter.data.values[0] == "–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏":
            embed = disnake.Embed(title="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏", color=self.embed_color)
            embed.add_field(name="–ü–µ—Ä–µ–Ω–æ—Å –∞–¥–º–∏–Ω/–≤–∏–ø –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏", value="150—Ä", inline=False)
            embed.add_field(name="–†–∞–∑–º—É—Ç –Ω–∞ —Å–∞–π—Ç–µ", value="200—Ä", inline=False)
            embed.add_field(name="–†–∞–∑–º–æ—Ä–æ–∑–∫–∞ –ø—Ä–∞–≤ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤", value="350—Ä", inline=False)
            embed.add_field(name="–†–∞–∑–º–æ—Ä–æ–∑–∫–∞ –ø—Ä–∞–≤ –¥–ª—è —Å–ø–æ–Ω—Å–æ—Ä–∞", value="750—Ä", inline=False)
            await inter.response.edit_message(embed=embed)
        elif inter.data.values[0] == "–∞–≤—Ç–æ-–ø–æ–¥—Å—á–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞":
            view = disnake.ui.View()
            select_menu = disnake.ui.Select(
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç",
                custom_id="admin_level_select",
                options=[
                    disnake.SelectOption(label="–ê–¥–º–∏–Ω 1 —É—Ä–æ–≤–Ω—è", value="admin_1lvl"),
                    disnake.SelectOption(label="–ê–¥–º–∏–Ω 2 —É—Ä–æ–≤–Ω—è", value="admin_2lvl"),
                    disnake.SelectOption(label="–°–ø–æ–Ω—Å–æ—Ä", value="sponsor"),
                ]
            )
            select_menu.callback = self.refund_callback
            view.add_item(select_menu)
            await inter.response.edit_message(content="", view=view)

    async def type_callback(self, inter):
        if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
            await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
            return

        if inter.data.values[0] == "–Ω–∞–∑–∞–¥":
            view = disnake.ui.View()
            select_menu = disnake.ui.Select(
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç",
                custom_id="price_select",
                options=[
                    disnake.SelectOption(label="–î–æ–∫—É–ø–∫–∞", value="–¥–æ–∫—É–ø–∫–∞"),
                    disnake.SelectOption(label="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏", value="–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏"),
                    disnake.SelectOption(label="–ê–≤—Ç–æ-–ø–æ–¥—Å—á–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞", value="–∞–≤—Ç–æ-–ø–æ–¥—Å—á–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞"),
                ]
            )
            select_menu.callback = self.price_callback
            view.add_item(select_menu)
            await inter.response.edit_message(content="", view=view)
        elif inter.data.values[0] == "admin":
            view = disnake.ui.View()
            select_menu = disnake.ui.Select(
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å",
                custom_id="admin_level_select",
                options=[
                    disnake.SelectOption(label="1lvl", value="1lvl"),
                    disnake.SelectOption(label="2lvl", value="2lvl"),
                    disnake.SelectOption(label="–ù–∞–∑–∞–¥", value="–Ω–∞–∑–∞–¥")
                ]
            )
            select_menu.callback = self.admin_level_callback
            view.add_item(select_menu)
            await inter.response.edit_message(content="", view=view)
        elif inter.data.values[0] == "vip":
            view = disnake.ui.View()
            select_menu = disnake.ui.Select(
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å",
                custom_id="vip_level_select",
                options=[
                    disnake.SelectOption(label="Medium", value="medium"),
                    disnake.SelectOption(label="Platinum", value="platinum"),
                    disnake.SelectOption(label="Crystal", value="crystal"),
                    disnake.SelectOption(label="–ù–∞–∑–∞–¥", value="–Ω–∞–∑–∞–¥")
                ]
            )
            select_menu.callback = self.vip_level_callback
            view.add_item(select_menu)
            await inter.response.edit_message(content="", view=view)

    async def vip_level_callback(self, inter):
        if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
            await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
            return

        if inter.data.values[0] == "–Ω–∞–∑–∞–¥":
            view = disnake.ui.View()
            select_menu = disnake.ui.Select(
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø",
                custom_id="type_select",
                options=[
                    disnake.SelectOption(label="–ê–¥–º–∏–Ω", value="admin"),
                    disnake.SelectOption(label="–í–∏–ø", value="vip"),
                    disnake.SelectOption(label="–ù–∞–∑–∞–¥", value="–Ω–∞–∑–∞–¥")
                ]
            )
            select_menu.callback = self.type_callback
            view.add_item(select_menu)
            await inter.response.edit_message(content="", view=view)
        else:
            self.db.cursor.execute("SELECT vip_medium_price, vip_platinum_price, vip_crystal_price, vip_crystalplus_price FROM price_list")
            prices = self.db.cursor.fetchone()
            if prices is None:
                await inter.response.send_message("–¶–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", ephemeral=True)
                return
            vip_medium_price = prices[0]
            vip_platinum_price = prices[1]
            vip_crystal_price = prices[2]
            vip_crystalplus_price = prices[3]
            embed = disnake.Embed(title="–î–æ–∫—É–ø–∫–∞ –≤–∏–ø–∞", color=self.embed_color)
            if inter.data.values[0] == "medium":
                embed.add_field(name="–° Medium –Ω–∞ Platinum", value=f"{vip_platinum_price - vip_medium_price}—Ä", inline=False)
                embed.add_field(name="–° Medium –Ω–∞ Crystal", value=f"{vip_crystal_price - vip_medium_price}—Ä", inline=False)
                embed.add_field(name="–° Medium –Ω–∞ Crystal+", value=f"{vip_crystalplus_price - vip_medium_price}—Ä", inline=False)
            elif inter.data.values[0] == "platinum":
                embed.add_field(name="–° Platinum –Ω–∞ Crystal", value=f"{vip_crystal_price - vip_platinum_price}—Ä", inline=False)
                embed.add_field(name="–° Platinum –Ω–∞ Crystal+", value=f"{vip_crystalplus_price - vip_platinum_price}—Ä", inline=False)
            elif inter.data.values[0] == "crystal":
                embed.add_field(name="–° Crystal –Ω–∞ Crystal+", value=f"{vip_crystalplus_price - vip_crystal_price}—Ä", inline=False)
            await inter.response.edit_message(embed=embed)

    async def admin_level_callback(self, inter):
        if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
            await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
            return

        if inter.data.values[0] == "–Ω–∞–∑–∞–¥":
            view = disnake.ui.View()
            select_menu = disnake.ui.Select(
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø",
                custom_id="type_select",
                options=[
                    disnake.SelectOption(label="–ê–¥–º–∏–Ω", value="admin"),
                    disnake.SelectOption(label="–í–∏–ø", value="vip"),
                    disnake.SelectOption(label="–ù–∞–∑–∞–¥", value="–Ω–∞–∑–∞–¥")
                ]
            )
            select_menu.callback = self.type_callback
            view.add_item(select_menu)
            await inter.response.edit_message(content="", view=view)
        else:
            self.db.cursor.execute("SELECT admin_1lvl_price, admin_2lvl_price, sponsor_price FROM price_list")
            prices = self.db.cursor.fetchone()
            if prices is None:
                await inter.response.send_message("–¶–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!", ephemeral=True)
                return
            admin_1lvl_price = prices[0]
            admin_2lvl_price = prices[1]
            sponsor_price = prices[2]
            embed = disnake.Embed(title="–î–æ–∫—É–ø–∫–∞ –∞–¥–º–∏–Ω–∫–∏", color=self.embed_color)
            if inter.data.values[0] == "1lvl":
                price_diff_2lvl = admin_2lvl_price - admin_1lvl_price
                price_diff_sponsor = sponsor_price - admin_1lvl_price
                embed.add_field(name="–° 1lvl –Ω–∞ 2lvl", value=f"{price_diff_2lvl}—Ä", inline=False)
                embed.add_field(name="–° 1lvl –Ω–∞ Sponsor", value=f"{price_diff_sponsor}—Ä", inline=False)
            elif inter.data.values[0] == "2lvl":
                price_diff_sponsor = sponsor_price - admin_2lvl_price
                embed.add_field(name="–° 2lvl –Ω–∞ Sponsor", value=f"{price_diff_sponsor}—Ä", inline=False)
            await inter.response.edit_message(embed=embed)

    async def refund_callback(self, inter):
        if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
            await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
            return

        admin_level = inter.data.values[0]

        modal = disnake.ui.Modal(
            title="–ê–≤—Ç–æ-–ø–æ–¥—Å—á–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞",
            custom_id="refund_modal",
            components=[
                disnake.ui.ActionRow(
                    disnake.ui.TextInput(
                        label="–£—Ä–æ–≤–µ–Ω—å –∞–¥–º–∏–Ω–∫–∏",
                        placeholder="1lvl –∏–ª–∏ 2lvl –∏–ª–∏ sponsor",
                        custom_id="admin_level_input",
                        style=disnake.TextInputStyle.short,
                        value=admin_level
                    )
                ),
                disnake.ui.ActionRow(
                    disnake.ui.TextInput(
                        label="–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –∞–¥–º–∏–Ω–∫–∏",
                        placeholder="1337",
                        custom_id="price_input",
                        style=disnake.TextInputStyle.short,
                    )
                ),
                disnake.ui.ActionRow(
                    disnake.ui.TextInput(
                        label="–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏ –∞–¥–º–∏–Ω–∫–∏ (–¥–¥.–º–º.–≥–≥–≥–≥)",
                        placeholder="12.09.2024",
                        custom_id="date_input",
                        style=disnake.TextInputStyle.short,
                    )
                ),
            ],
        )

        await inter.response.send_modal(modal)
        self.bot.add_modal_handler(self.refund_modal_callback)
    

    @commands.slash_command(description="[DEV] - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–∞—Ç–∞–º")
    async def date_stats(self, inter):
        try:
            if not self.check_staff_permissions(inter, "dev"):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                logger.info(f"[COMMANDS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /date_stats, –Ω–æ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
                return
            self.db.cursor.execute("""
                SELECT DISTINCT date FROM date_stats
                ORDER BY date DESC
            """)
            dates = self.db.cursor.fetchall()
            options = []
            for date in dates:
                date_str = date[0]
                date_str = date_str.replace('-', '.')
                options.append(disnake.SelectOption(label=date_str, value=date_str))
            view = disnake.ui.View()
            select_menu = disnake.ui.Select(
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É",
                custom_id="date_select",
                options=options
            )
            select_menu.callback = self.date_stats_callback
            view.add_item(select_menu)
            await inter.response.send_message("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É", view=view)
            logger.info(f"[COMMANDS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /date_stats")
        except Exception as e:
            await inter.response.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–∞—Ç", ephemeral=True)
            logger.error(f"[COMMANDS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–∞—Ç: {e}")

    async def date_stats_callback(self, inter):
        date_str = inter.data.values[0]
        date_str = date_str.replace('-', '.')
        date = datetime.datetime.strptime(date_str, "%d.%m.%Y").date()

        self.db.cursor.execute(""" 
            SELECT username, SUM(closed_tickets) AS total_closed
            FROM date_stats
            WHERE date = ?
            GROUP BY username
            ORDER BY total_closed DESC
        """, (date.strftime("%d.%m.%Y"),))
        stats = self.db.cursor.fetchall()

        embed = disnake.Embed(title=f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞—Ç–∞–º ({date_str})", color=self.embed_color)
        for username, total_closed in stats:
            embed.add_field(name=username, value=f"–ó–∞–∫—Ä—ã—Ç–æ —Ç–∏–∫–µ—Ç–æ–≤: {total_closed}", inline=False)

        await inter.response.edit_message(embed=embed, content="")

    @commands.slash_command(description="[DEV] - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    async def stats(self, inter):
        try:
            if not self.check_staff_permissions(inter, "dev"):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                logger.info(f"[COMMANDS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} –ø—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /stats, –Ω–æ –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤")
                return
            self.page = 1
            self.db.cursor.execute("SELECT * FROM staff_list")
            staff_members = self.db.cursor.fetchall()
            staff_members.sort(key=lambda x: x[5], reverse=True)
            embed = disnake.Embed(
                title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                description=f"–û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {self.page} –∏–∑ {len(staff_members) // 5 + 1}",
                color=self.embed_color
            )
            start = (self.page - 1) * 5
            end = self.page * 5
            for i, staff_member in enumerate(staff_members[start:end], start=1):
                username = staff_member[1]
                role = staff_member[4]
                embed.add_field(
                    name=f"{i}. {username}",
                    value=f"ü™™ –†–æ–ª—å: {role}\nüé´ –ó–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: **–°–µ–∫—Ä–µ—Ç**",
                    inline=False
                )
            view = disnake.ui.View()
            left_button = disnake.ui.Button(label="‚¨ÖÔ∏è", custom_id="left", style=disnake.ButtonStyle.gray)
            right_button = disnake.ui.Button(label="‚û°Ô∏è", custom_id="right", style=disnake.ButtonStyle.gray)
            secret_button = disnake.ui.Button(label="–û—Ç–∫—Ä—ã—Ç—å —Å–µ–∫—Ä–µ—Ç", custom_id="secret", style=disnake.ButtonStyle.red)
            view.add_item(left_button)
            view.add_item(right_button)
            view.add_item(secret_button)
            self.stats_message = await inter.response.send_message(embed=embed, view=view)
            logger.info(f"[COMMANDS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {inter.author.name} —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /stats")
        except Exception as e:
            await inter.response.send_message("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", ephemeral=True)
            logger.error(f"[COMMANDS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {e}")

    @commands.Cog.listener()
    async def on_button_click(self, inter):
        if inter.data.custom_id == "left":
            if not self.check_staff_permissions(inter, "dev"):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                return
            if self.page > 1:
                self.page -= 1
                self.db.cursor.execute("SELECT * FROM staff_list")
                staff_members = self.db.cursor.fetchall()
                staff_members.sort(key=lambda x: x[5], reverse=True)

                embed = disnake.Embed(
                    title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                    description=f"–û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {self.page} –∏–∑ {len(staff_members) // 5 + 1}",
                    color=self.embed_color
                )

                start = (self.page - 1) * 5
                end = self.page * 5

                for i, staff_member in enumerate(staff_members[start:end], start=1):
                    username = staff_member[1]
                    role = staff_member[4]
                    closed_tickets = staff_member[5]

                    embed.add_field(
                        name=f"{(self.page - 1) * 5 + i}. {username}",
                        value=f"ü™™ –†–æ–ª—å: {role}\nüé´ –ó–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: **–°–µ–∫—Ä–µ—Ç**",
                        inline=False
                    )

                await inter.message.edit(embed=embed)
                await inter.response.send_message("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", ephemeral=True)

        elif inter.data.custom_id == "right":
            if not self.check_staff_permissions(inter, "dev"):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                return
            self.page += 1
            self.db.cursor.execute("SELECT * FROM staff_list")
            staff_members = self.db.cursor.fetchall()
            staff_members.sort(key=lambda x: x[5], reverse=True)

            embed = disnake.Embed(
                title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                description=f"–û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {self.page} –∏–∑ {len(staff_members) // 5 + 1}",
                color=self.embed_color
            )

            start = (self.page - 1) * 5
            end = self.page * 5

            for i, staff_member in enumerate(staff_members[start:end], start=1):
                username = staff_member[1]
                role = staff_member[4]
                closed_tickets = staff_member[5]

                embed.add_field(
                    name=f"{(self.page - 1) * 5 + i}. {username}",
                    value=f"ü™™ –†–æ–ª—å: {role}\nüé´ –ó–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: **–°–µ–∫—Ä–µ—Ç**",
                    inline=False
                )

            await inter.message.edit(embed=embed)
            await inter.response.send_message("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", ephemeral=True)

        elif inter.data.custom_id == "secret":
            if not self.check_staff_permissions(inter, "dev"):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                return
            self.db.cursor.execute("SELECT * FROM staff_list")
            staff_members = self.db.cursor.fetchall()
            staff_members.sort(key=lambda x: x[5], reverse=True)

            embed = disnake.Embed(
                title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
                description=f"–û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {self.page} –∏–∑ {len(staff_members) // 5 + 1}",
                color=self.embed_color
            )

            start = (self.page - 1) * 5
            end = self.page * 5

            for i, staff_member in enumerate(staff_members[start:end], start=1):
                username = staff_member[1]
                role = staff_member[4]
                closed_tickets = staff_member[5]

                embed.add_field(
                    name=f"{(self.page - 1) * 5 + i}. {username}",
                    value=f"ü™™ –†–æ–ª—å: {role}\nüé´ –ó–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: {closed_tickets}",
                    inline=False
                )

            if self.stats_message is not None:
                await self.stats_message.edit(embed=embed)
            else:
                await inter.message.edit(embed=embed)
            await inter.response.send_message("–ü–æ–∫–∞–∑–∞–ª —Å–µ–∫—Ä–µ—Ç–∏–∫, —É—Ö—Ö—Ö <3", ephemeral=True)



    @commands.slash_command(description="[DEV] - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞")
    async def settings(self, inter):
        if not self.check_staff_permissions(inter, "dev"):
            await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
            return
        if inter.guild is None:
            await inter.response.send_message("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ", ephemeral=True)
            return
        modal = disnake.ui.Modal(
            title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
            custom_id="settings_modal",
            components=[
                disnake.ui.ActionRow(
                    disnake.ui.TextInput(
                        label="–¶–≤–µ—Ç –±–æ–∫–æ–≤–æ–π –ø–æ–ª–æ—Å–∫–∏ (–í HEX)",
                        placeholder="#7789fd",
                        custom_id="color",
                        style=disnake.TextInputStyle.short,
                    )
                ),
                disnake.ui.ActionRow(
                    disnake.ui.TextInput(
                        label="–ê–π–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤",
                        placeholder="1234567890",
                        custom_id="category_id",
                        style=disnake.TextInputStyle.short,
                    )
                ),
                disnake.ui.ActionRow(
                    disnake.ui.TextInput(
                        label="–ê–π–¥–∏ –∫–∞–Ω–∞–ª–∞ —Ç–∏–∫–µ—Ç–æ–≤",
                        placeholder="1234567890",
                        custom_id="channel_id",
                        style=disnake.TextInputStyle.short,
                    )
                ),
                disnake.ui.ActionRow(
                    disnake.ui.TextInput(
                        label="–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è",
                        placeholder="10:00 - 20:00",
                        custom_id="primetime",
                        style=disnake.TextInputStyle.short,
                    )
                ),
            ],
        )

        await inter.response.send_modal(modal)

    @commands.Cog.listener()
    async def on_modal_submit(self, inter: disnake.ModalInteraction):
        if inter.data.custom_id == "refund_modal":
            if not (self.check_staff_permissions(inter, "staff") or self.check_staff_permissions(inter, "dev")):
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã", ephemeral=True)
                return
            admin_level = inter.text_values['admin_level_input']
            date_str = inter.text_values['date_input']
            date = datetime.datetime.strptime(date_str, "%d.%m.%Y").date()
            price = int(inter.text_values['price_input'])

            current_date = datetime.date.today()
            days_diff = (current_date - date).days
            percent_diff = days_diff * 0.7

            guaranteed_refund = price / 3
            remaining_price = price - guaranteed_refund
            refund = remaining_price - (remaining_price * percent_diff / 100)

            final_refund = refund + guaranteed_refund

            await inter.response.send_message(f"–ê–≤—Ç–æ-–ø–æ–¥—Å—á–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞: {int(final_refund)} —Ä—É–±–ª–µ–π", ephemeral=True)
        if inter.data.custom_id == "settings_modal":
            color = inter.text_values['color']
            category_id = int(inter.text_values['category_id'])
            channel_id = int(inter.text_values['channel_id'])
            primetime = str(inter.text_values['primetime'])

            category = inter.guild.get_channel(category_id)
            channel = inter.guild.get_channel(channel_id)

            if category is None:
                await inter.response.send_message("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º ID –≤–≤–µ–¥—ë–Ω–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!")
                return

            if channel is None:
                await inter.response.send_message("–ö–∞–Ω–∞–ª —Å —Ç–∞–∫–∏–º ID –≤–≤–µ–¥—ë–Ω–Ω–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!")
                return

            self.db.cursor.execute(""" 
                SELECT * FROM settings WHERE guild_id = ?
            """, (inter.guild.id,))
            existing_settings = self.db.cursor.fetchone()

            if existing_settings is not None:
                self.db.cursor.execute(""" 
                    UPDATE settings SET embed_color = ?, category_id = ?, ticket_channel_id = ?, primetime = ?, logging = ?
                    WHERE guild_id = ?
                """, (color, category_id, channel_id, primetime, inter.guild.id))
            else:
                self.db.cursor.execute(""" 
                    INSERT INTO settings (guild_id, embed_color, category_id, ticket_channel_id, primetime, logging)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, (inter.guild.id, color, category_id, channel_id, primetime))

            self.db.conn.commit()

            await inter.response.send_message(
                embed=disnake.Embed(title="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", description=f"–¶–≤–µ—Ç –±–æ–∫–æ–≤–æ–π –ø–æ–ª–æ—Å–∫–∏: {color}\n"
                f"–ê–π–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤: {category_id}\n"
                f"–ê–π–¥–∏ –∫–∞–Ω–∞–ª–∞ —Ç–∏–∫–µ—Ç–æ–≤: {channel_id}\n"
                f"–†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è: {primetime}\n",
                color=self.embed_color),
                ephemeral=True
            )

def setupcommands(bot):
    bot.add_cog(Settings(bot))